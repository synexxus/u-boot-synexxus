/*
 * Copyright (C) 2013, Boundary Devices <info@boundarydevices.com>
 *
 * SPDX-License-Identifier:	GPL-2.0+
 */

#undef MX6PAD
#undef MX6NAME

#ifdef FOR_DL_SOLO
#define MX6PAD(a) MX6DL_PAD_##a
#define MX6NAME(a) mx6dl_solo_##a
#else
#define MX6PAD(a) MX6Q_PAD_##a
#define MX6NAME(a) mx6q_##a
#endif

#define PADCFG_INPUT		(PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm | PAD_CTL_HYS)
#define PADCFG_INPUT_L		(PAD_CTL_SPEED_LOW | PAD_CTL_DSE_40ohm | PAD_CTL_HYS)
#define PADCFG_INPUT_DN		(PADCFG_INPUT | PAD_CTL_PUS_100K_DOWN)
#define PADCFG_INPUT_UP		(PADCFG_INPUT | PAD_CTL_PUS_100K_UP)
#define PADCFG_INPUT_L_UP	(PADCFG_INPUT_L | PAD_CTL_PUS_100K_UP)

#define AUD_PAD_CTRL	(PADCFG_INPUT_L_UP | PAD_CTL_SRE_FAST)
#define CSI_PAD_CTRL	(PADCFG_INPUT_UP | PAD_CTL_SRE_FAST)
#define UART_PAD_CTRL	(PADCFG_INPUT_UP | PAD_CTL_SRE_FAST)

#define PADCFG_FLOAT_IRQ (PADCFG_INPUT)

#define USDHC_PAD_CTRL_50MHZ (PAD_CTL_PUS_47K_UP |		\
	PAD_CTL_SPEED_LOW | PAD_CTL_DSE_80ohm |			\
	PAD_CTL_SRE_FAST  | PAD_CTL_HYS)

#define OTGID_PAD_CTRL		USDHC_PAD_CTRL_50MHZ
#define HDMICEC_PAD_CTRL	(PADCFG_INPUT_UP | PAD_CTL_ODE | PAD_CTL_SRE_SLOW)
#define ENET_PAD_CTRL		PADCFG_INPUT_UP

#define SPI_PAD_CTRL (PAD_CTL_HYS | PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm | \
		PAD_CTL_SRE_FAST)

#define BUTTON_PAD_CTRL (PAD_CTL_PUS_100K_UP |			\
	PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm | PAD_CTL_HYS)

#define I2C_PAD_CTRL	(PAD_CTL_PUS_100K_UP |			\
	PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm | PAD_CTL_HYS |	\
	PAD_CTL_ODE | PAD_CTL_SRE_FAST)

#define WEAK_PULLUP	(PAD_CTL_PUS_100K_UP |			\
	PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm | PAD_CTL_HYS |	\
	PAD_CTL_SRE_SLOW)

#define WEAK_PULLDN	(PAD_CTL_PUS_100K_DOWN |		\
	PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm |			\
	PAD_CTL_HYS | PAD_CTL_SRE_SLOW)

#define OUTPUT_40OHM (PAD_CTL_SPEED_MED|PAD_CTL_DSE_40ohm)
#define SPDIF_PAD_CTRL	WEAK_PULLUP

#define NP(id, pina, pinb, pad_ctl) \
	NEW_PAD_CTRL(MX6PAD(SD##id##_##pina##__SD##id##_##pinb), pad_ctl)

#define SD_PINS(id, pad_ctl) \
	NP(id, CLK, CLK, pad_ctl),	\
	NP(id, CMD, CMD, pad_ctl),	\
	NP(id, DAT0, DATA0, pad_ctl),	\
	NP(id, DAT1, DATA1, pad_ctl),	\
	NP(id, DAT2, DATA2, pad_ctl),	\
	NP(id, DAT3, DATA3, pad_ctl)

#define SD_PINS8(id, pad_ctl) \
	SD_PINS(id, pad_ctl), \
	NP(id, DAT4, DATA4, pad_ctl),	\
	NP(id, DAT5, DATA5, pad_ctl),	\
	NP(id, DAT6, DATA6, pad_ctl),	\
	NP(id, DAT7, DATA7, pad_ctl)

static const iomux_v3_cfg_t MX6NAME(board_pads)[] = {
	/* Audio - GS2971, WM5102 */
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT23__AUD4_RXD), AUD_PAD_CTRL),	/* pin J3 - AOUT1/2 */
	NEW_PAD_CTRL(MX6PAD(SD2_CMD__AUD4_RXC), AUD_PAD_CTRL),		/* pin J4 - ACLK*/
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT18__AUD4_RXFS), AUD_PAD_CTRL),	/* pin H4 - WCLK*/

	/* Audio - TC3587 mipi hdmi input */
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT13__AUD5_RXFS), AUD_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT14__AUD5_RXC), AUD_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT19__AUD5_RXD), AUD_PAD_CTRL),

	/* Audio - WM5102 */
	NEW_PAD_CTRL(MX6PAD(DI0_PIN2__AUD6_TXD), AUD_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(DI0_PIN3__AUD6_TXFS), AUD_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(DI0_PIN4__AUD6_RXD), AUD_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(DI0_PIN15__AUD6_TXC), AUD_PAD_CTRL),

	/* WM5102 */
//	NEW_PAD_CTRL(MX6PAD(SD1_CLK__OSC32K_32K_OUT), OUTPUT_40OHM),	/* MCLK2 */
	NEW_PAD_CTRL(MX6PAD(NANDF_CS2__CCM_CLKO2), OUTPUT_40OHM),	/* MCLK1 */
#define GP_WM5102_RESET		IMX_GPIO_NR(5, 9)
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT15__GPIO5_IO09), OUTPUT_40OHM),
#define GP_WM5102_IRQ		IMX_GPIO_NR(5, 10)
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT16__GPIO5_IO10), WEAK_PULLUP),
#define GP_WM5102_LDO_EN	IMX_GPIO_NR(5, 11)
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT17__GPIO5_IO11), OUTPUT_40OHM),

	/* camera - video0 - ADV7180 - I2C3, crystal 28.636 MHz */
	NEW_PAD_CTRL(MX6PAD(CSI0_DAT12__IPU1_CSI0_DATA12), CSI_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(CSI0_DAT13__IPU1_CSI0_DATA13), CSI_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(CSI0_DAT14__IPU1_CSI0_DATA14), CSI_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(CSI0_DAT15__IPU1_CSI0_DATA15), CSI_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(CSI0_DAT16__IPU1_CSI0_DATA16), CSI_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(CSI0_DAT17__IPU1_CSI0_DATA17), CSI_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(CSI0_DAT18__IPU1_CSI0_DATA18), CSI_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(CSI0_DAT19__IPU1_CSI0_DATA19), CSI_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(CSI0_PIXCLK__IPU1_CSI0_PIXCLK), CSI_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(CSI0_MCLK__GPIO5_IO19), WEAK_PULLUP),	/* Hsync */
	NEW_PAD_CTRL(MX6PAD(CSI0_VSYNC__GPIO5_IO21), WEAK_PULLUP),	/* Vsync */
#define GP_ADV7180_RESET	IMX_GPIO_NR(4, 15)
	NEW_PAD_CTRL(MX6PAD(KEY_ROW4__GPIO4_IO15), OUTPUT_40OHM),
#define GP_ADV7180_IRQ		IMX_GPIO_NR(1, 9)
	NEW_PAD_CTRL(MX6PAD(GPIO_9__GPIO1_IO09), WEAK_PULLUP),

	/* camera - video1 - TC3587 mipi hdmi input */
#define GP_TC3587_VIDEO_DETECT	IMX_GPIO_NR(3, 23)
	NEW_PAD_CTRL(MX6PAD(EIM_D23__GPIO3_IO23), WEAK_PULLUP),	/* J13 Pin 1 - Video detect */
#define GP_TC3587_HPD_IN	IMX_GPIO_NR(3, 29)
	NEW_PAD_CTRL(MX6PAD(EIM_D29__GPIO3_IO29), WEAK_PULLUP),		/* J13, pin 20 */
#define GP_TC3587_RESET		IMX_GPIO_NR(6, 11)
	NEW_PAD_CTRL(MX6PAD(NANDF_CS0__GPIO6_IO11), OUTPUT_40OHM),
#define GP_TC3587_IRQ		IMX_GPIO_NR(6, 14)
	NEW_PAD_CTRL(MX6PAD(NANDF_CS1__GPIO6_IO14), PADCFG_FLOAT_IRQ),
#define GP_TC3587_I2C_EN	IMX_GPIO_NR(6, 16)
	NEW_PAD_CTRL(MX6PAD(NANDF_CS3__GPIO6_IO16), OUTPUT_40OHM),

	/* camera - video2 - GS2971(SDI) on CSI1 */
#ifdef FOR_DL_SOLO
	/* Dualite/Solo doesn't have IPU2 */
	NEW_PAD_CTRL(MX6PAD(EIM_A24__IPU1_CSI1_DATA19), CSI_PAD_CTRL),	/* GPIO2[30] */
	NEW_PAD_CTRL(MX6PAD(EIM_A23__IPU1_CSI1_DATA18), CSI_PAD_CTRL),	/* GPIO6[6] */
	NEW_PAD_CTRL(MX6PAD(EIM_A22__IPU1_CSI1_DATA17), CSI_PAD_CTRL),	/* GPIO2[16] */
	NEW_PAD_CTRL(MX6PAD(EIM_A21__IPU1_CSI1_DATA16), CSI_PAD_CTRL),	/* GPIO2[17] */
	NEW_PAD_CTRL(MX6PAD(EIM_A20__IPU1_CSI1_DATA15), CSI_PAD_CTRL),	/* GPIO2[18] */
	NEW_PAD_CTRL(MX6PAD(EIM_A19__IPU1_CSI1_DATA14), CSI_PAD_CTRL),	/* GPIO2[19] */
	NEW_PAD_CTRL(MX6PAD(EIM_A18__IPU1_CSI1_DATA13), CSI_PAD_CTRL),	/* GPIO2[20] */
	NEW_PAD_CTRL(MX6PAD(EIM_A17__IPU1_CSI1_DATA12), CSI_PAD_CTRL),	/* GPIO2[21] */
	NEW_PAD_CTRL(MX6PAD(EIM_EB0__IPU1_CSI1_DATA11), CSI_PAD_CTRL),	/* GPIO2[28] */
	NEW_PAD_CTRL(MX6PAD(EIM_EB1__IPU1_CSI1_DATA10), CSI_PAD_CTRL),	/* GPIO2[29] */
	NEW_PAD_CTRL(MX6PAD(EIM_DA0__IPU1_CSI1_DATA09), CSI_PAD_CTRL),	/* GPIO3[0] */
	NEW_PAD_CTRL(MX6PAD(EIM_DA1__IPU1_CSI1_DATA08), CSI_PAD_CTRL),	/* GPIO3[1] */
	NEW_PAD_CTRL(MX6PAD(EIM_DA2__IPU1_CSI1_DATA07), CSI_PAD_CTRL),	/* GPIO3[2] */
	NEW_PAD_CTRL(MX6PAD(EIM_DA3__IPU1_CSI1_DATA06), CSI_PAD_CTRL),	/* GPIO3[3] */
	NEW_PAD_CTRL(MX6PAD(EIM_DA4__IPU1_CSI1_DATA05), CSI_PAD_CTRL),	/* GPIO3[4] */
	NEW_PAD_CTRL(MX6PAD(EIM_DA5__IPU1_CSI1_DATA04), CSI_PAD_CTRL),	/* GPIO3[5] */
	NEW_PAD_CTRL(MX6PAD(EIM_DA6__IPU1_CSI1_DATA03), CSI_PAD_CTRL),	/* GPIO3[6] */
	NEW_PAD_CTRL(MX6PAD(EIM_DA7__IPU1_CSI1_DATA02), CSI_PAD_CTRL),	/* GPIO3[7] */
	NEW_PAD_CTRL(MX6PAD(EIM_DA8__IPU1_CSI1_DATA01), CSI_PAD_CTRL),	/* GPIO3[8] */
	NEW_PAD_CTRL(MX6PAD(EIM_DA9__IPU1_CSI1_DATA00), CSI_PAD_CTRL),	/* GPIO3[9] */
	NEW_PAD_CTRL(MX6PAD(EIM_A16__IPU1_CSI1_PIXCLK), CSI_PAD_CTRL),	/* GPIO2[22] */
#else
	NEW_PAD_CTRL(MX6PAD(EIM_A24__IPU2_CSI1_DATA19), CSI_PAD_CTRL),	/* GPIO2[30] */
	NEW_PAD_CTRL(MX6PAD(EIM_A23__IPU2_CSI1_DATA18), CSI_PAD_CTRL),	/* GPIO6[6] */
	NEW_PAD_CTRL(MX6PAD(EIM_A22__IPU2_CSI1_DATA17), CSI_PAD_CTRL),	/* GPIO2[16] */
	NEW_PAD_CTRL(MX6PAD(EIM_A21__IPU2_CSI1_DATA16), CSI_PAD_CTRL),	/* GPIO2[17] */
	NEW_PAD_CTRL(MX6PAD(EIM_A20__IPU2_CSI1_DATA15), CSI_PAD_CTRL),	/* GPIO2[18] */
	NEW_PAD_CTRL(MX6PAD(EIM_A19__IPU2_CSI1_DATA14), CSI_PAD_CTRL),	/* GPIO2[19] */
	NEW_PAD_CTRL(MX6PAD(EIM_A18__IPU2_CSI1_DATA13), CSI_PAD_CTRL),	/* GPIO2[20] */
	NEW_PAD_CTRL(MX6PAD(EIM_A17__IPU2_CSI1_DATA12), CSI_PAD_CTRL),	/* GPIO2[21] */
	NEW_PAD_CTRL(MX6PAD(EIM_EB0__IPU2_CSI1_DATA11), CSI_PAD_CTRL),	/* GPIO2[28] */
	NEW_PAD_CTRL(MX6PAD(EIM_EB1__IPU2_CSI1_DATA10), CSI_PAD_CTRL),	/* GPIO2[29] */
	NEW_PAD_CTRL(MX6PAD(EIM_DA0__IPU2_CSI1_DATA09), CSI_PAD_CTRL),	/* GPIO3[0] */
	NEW_PAD_CTRL(MX6PAD(EIM_DA1__IPU2_CSI1_DATA08), CSI_PAD_CTRL),	/* GPIO3[1] */
	NEW_PAD_CTRL(MX6PAD(EIM_DA2__IPU2_CSI1_DATA07), CSI_PAD_CTRL),	/* GPIO3[2] */
	NEW_PAD_CTRL(MX6PAD(EIM_DA3__IPU2_CSI1_DATA06), CSI_PAD_CTRL),	/* GPIO3[3] */
	NEW_PAD_CTRL(MX6PAD(EIM_DA4__IPU2_CSI1_DATA05), CSI_PAD_CTRL),	/* GPIO3[4] */
	NEW_PAD_CTRL(MX6PAD(EIM_DA5__IPU2_CSI1_DATA04), CSI_PAD_CTRL),	/* GPIO3[5] */
	NEW_PAD_CTRL(MX6PAD(EIM_DA6__IPU2_CSI1_DATA03), CSI_PAD_CTRL),	/* GPIO3[6] */
	NEW_PAD_CTRL(MX6PAD(EIM_DA7__IPU2_CSI1_DATA02), CSI_PAD_CTRL),	/* GPIO3[7] */
	NEW_PAD_CTRL(MX6PAD(EIM_DA8__IPU2_CSI1_DATA01), CSI_PAD_CTRL),	/* GPIO3[8] */
	NEW_PAD_CTRL(MX6PAD(EIM_DA9__IPU2_CSI1_DATA00), CSI_PAD_CTRL),	/* GPIO3[9] */
	NEW_PAD_CTRL(MX6PAD(EIM_A16__IPU2_CSI1_PIXCLK), CSI_PAD_CTRL),	/* GPIO2[22] - pin A8 */
#endif
	/* Not used, but MUST be in GPIO mode */
	NEW_PAD_CTRL(MX6PAD(EIM_DA10__GPIO3_IO10), WEAK_PULLUP),	/* CSI1_DATA_EN not used (pin B5 stat2) */
	NEW_PAD_CTRL(MX6PAD(EIM_DA11__GPIO3_IO11), WEAK_PULLUP),	/* pin A5 stat0, hsync */
	NEW_PAD_CTRL(MX6PAD(EIM_DA12__GPIO3_IO12), WEAK_PULLUP),	/* pin A6 stat1, vsync */

#define GP_GS2971_SMPTE_BYPASS	IMX_GPIO_NR(2, 24)
	NEW_PAD_CTRL(MX6PAD(EIM_CS1__GPIO2_IO24), WEAK_PULLUP),		/* pin G7 - i/o SMPTE bypass */
#define GP_GS2971_RESET		IMX_GPIO_NR(3, 13)
	NEW_PAD_CTRL(MX6PAD(EIM_DA13__GPIO3_IO13), OUTPUT_40OHM),	/* 0 - pin C7 - reset */
#define GP_GS2971_DVI_LOCK	IMX_GPIO_NR(3, 14)
	NEW_PAD_CTRL(MX6PAD(EIM_DA14__GPIO3_IO14), WEAK_PULLUP),		/* pin B6 - stat3 - DVI_LOCK */
#define GP_GS2971_DATA_ERR	IMX_GPIO_NR(3, 15)
	NEW_PAD_CTRL(MX6PAD(EIM_DA15__GPIO3_IO15), WEAK_PULLUP),		/* pin C6 - stat5 - DATA error */
#define GP_GS2971_LB_CONT	IMX_GPIO_NR(3, 20)
	NEW_PAD_CTRL(MX6PAD(EIM_D20__GPIO3_IO20), WEAK_PULLUP),		/* pin A3 - LB control - float, analog input */
#define GP_GS2971_Y_1ANC	IMX_GPIO_NR(4, 26)
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT5__GPIO4_IO26), WEAK_PULLUP),	/* pin C5 - stat4 - 1ANC - Y signal detect */
#define GP_GS2971_RC_BYPASS	IMX_GPIO_NR(4, 27)
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT6__GPIO4_IO27), OUTPUT_40OHM),	/* 0 - pin G3 - RC bypass - output is buffered(low) */
#define GP_GS2971_IOPROC_EN	IMX_GPIO_NR(4, 28)
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT7__GPIO4_IO28), OUTPUT_40OHM),	/* 0 - pin H8 - io(A/V) processor enable */
#define GP_GS2971_AUDIO_EN	IMX_GPIO_NR(4, 29)
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT8__GPIO4_IO29), OUTPUT_40OHM),	/* 0 - pin H3 - Audio Enable */
#define GP_GS2971_TIM_861	IMX_GPIO_NR(4, 30)
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT9__GPIO4_IO30), OUTPUT_40OHM),	/* 0 - pin H5 - TIM861 timing format, 1-use HSYNC/VSYNC */
#define GP_GS2971_SW_EN		IMX_GPIO_NR(4, 31)
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT10__GPIO4_IO31), OUTPUT_40OHM),	/* 0 - pin D7 - SW_EN - line lock enable */
#define GP_GS2971_STANDBY	IMX_GPIO_NR(5, 0)
	NEW_PAD_CTRL(MX6PAD(EIM_WAIT__GPIO5_IO00), OUTPUT_40OHM),		/* 1 - pin K2 - Standby */
#define GP_GS2971_DVB_ASI	IMX_GPIO_NR(5, 5)
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT11__GPIO5_IO05), WEAK_PULLUP),	/* pin G8 i/o DVB_ASI */

	/* ECSPI1 */
	NEW_PAD_CTRL(MX6PAD(EIM_D17__ECSPI1_MISO), SPI_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(EIM_D18__ECSPI1_MOSI), SPI_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(EIM_D16__ECSPI1_SCLK), SPI_PAD_CTRL),
#define GP_ECSPI1_CS1		IMX_GPIO_NR(3, 19)
	NEW_PAD_CTRL(MX6PAD(EIM_D19__GPIO3_IO19), OUTPUT_40OHM),		/* SS1 */

	/* ECSPI3 - WM5102, GS2971 */
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT2__ECSPI3_MISO), SPI_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT1__ECSPI3_MOSI), SPI_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT0__ECSPI3_SCLK), SPI_PAD_CTRL),
#define GP_ECSPI3_GS2971_CS	IMX_GPIO_NR(4, 24)
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT3__GPIO4_IO24), OUTPUT_40OHM),
#define GP_ECSPI3_WM5102_CS	IMX_GPIO_NR(4, 25)
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT4__GPIO4_IO25), OUTPUT_40OHM),

	/* ENET pads that don't change for PHY reset */
	NEW_PAD_CTRL(MX6PAD(ENET_MDIO__ENET_MDIO), ENET_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(ENET_MDC__ENET_MDC), ENET_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(RGMII_TXC__RGMII_TXC), ENET_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(RGMII_TD0__RGMII_TD0), ENET_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(RGMII_TD1__RGMII_TD1), ENET_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(RGMII_TD2__RGMII_TD2), ENET_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(RGMII_TD3__RGMII_TD3), ENET_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(RGMII_TX_CTL__RGMII_TX_CTL), ENET_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(ENET_REF_CLK__ENET_TX_CLK), ENET_PAD_CTRL),
	/* pin 42 PHY nRST */
#define GP_ENET_PHY_RESET	IMX_GPIO_NR(1, 27)
	NEW_PAD_CTRL(MX6PAD(ENET_RXD0__GPIO1_IO27), OUTPUT_40OHM),	/* Micrel RGMII Phy Reset */
#define GP_ENET_PHY_INT		IMX_GPIO_NR(1, 28)
	NEW_PAD_CTRL(MX6PAD(ENET_TX_EN__GPIO1_IO28), WEAK_PULLUP),	/* Micrel RGMII Phy Interrupt */

	/* HDMI */
	NEW_PAD_CTRL(MX6PAD(KEY_ROW2__HDMI_TX_CEC_LINE), HDMICEC_PAD_CTRL),

#define GP_TP101_ALERT		IMX_GPIO_NR(4, 5)
	NEW_PAD_CTRL(MX6PAD(GPIO_19__GPIO4_IO05), WEAK_PULLUP),


	/* PCIe */
#define GP_PCIE_RESET		IMX_GPIO_NR(5, 2)
	NEW_PAD_CTRL(MX6PAD(EIM_A25__GPIO5_IO02), OUTPUT_40OHM),
#define GP_PCIE_RADIO_ON	IMX_GPIO_NR(6, 10)
	NEW_PAD_CTRL(MX6PAD(NANDF_RB0__GPIO6_IO10), OUTPUT_40OHM),

	/* UART1 - J2 - PTT connector */
	NEW_PAD_CTRL(MX6PAD(SD3_DAT7__UART1_TX_DATA), UART_PAD_CTRL),	/* J2, pin 9 */
	NEW_PAD_CTRL(MX6PAD(SD3_DAT6__UART1_RX_DATA), UART_PAD_CTRL),	/* J2, pin 10 */
	NEW_PAD_CTRL(MX6PAD(EIM_EB2__GPIO2_IO30), WEAK_PULLUP),		/* J2, pin 7: PTT_R */
	NEW_PAD_CTRL(MX6PAD(EIM_EB3__GPIO2_IO31), WEAK_PULLUP),		/* J2, pin 6: PTT_L */

	/* UART2 - debug */
	NEW_PAD_CTRL(MX6PAD(EIM_D26__UART2_TX_DATA), UART_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(EIM_D27__UART2_RX_DATA), UART_PAD_CTRL),

	/* UART3 - relay J3 */
	NEW_PAD_CTRL(MX6PAD(EIM_D24__UART3_TX_DATA), UART_PAD_CTRL),	/* J3, pin 5 */
	NEW_PAD_CTRL(MX6PAD(EIM_D25__UART3_RX_DATA), UART_PAD_CTRL),	/* J3, pin 6 */
#define GP_RELAY_DETECT		IMX_GPIO_NR(7, 2)
	NEW_PAD_CTRL(MX6PAD(SD3_CMD__GPIO7_IO02), PADCFG_FLOAT_IRQ),	/* J3 pin 7 */
#define GP_J3_CARRIER_SENSE	IMX_GPIO_NR(7, 4)
	NEW_PAD_CTRL(MX6PAD(SD3_DAT0__GPIO7_IO04), PADCFG_FLOAT_IRQ),


#define GP_PTT_ON	IMX_GPIO_NR(7, 5)
	NEW_PAD_CTRL(MX6PAD(SD3_DAT1__GPIO7_IO05), PADCFG_FLOAT_IRQ),

#define GP_J11_HDMI_POWER_EN	IMX_GPIO_NR(7, 3)
	NEW_PAD_CTRL(MX6PAD(SD3_CLK__GPIO7_IO03), PADCFG_INPUT_L_UP),	/* power on J11 pin 3 */

	/* UART4 - GPS */
	NEW_PAD_CTRL(MX6PAD(KEY_COL0__UART4_TX_DATA), UART_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(KEY_ROW0__UART4_RX_DATA), UART_PAD_CTRL),
#define GP_GPS_RESET	IMX_GPIO_NR(7, 1)
	NEW_PAD_CTRL(MX6PAD(SD3_DAT4__GPIO7_IO01), PADCFG_FLOAT_IRQ),
#define GP_GPS_IRQ	IMX_GPIO_NR(7, 0)
	NEW_PAD_CTRL(MX6PAD(SD3_DAT5__GPIO7_IO00), WEAK_PULLUP),
#define GP_GPS_HEARTBEAT IMX_GPIO_NR(4, 10)
	NEW_PAD_CTRL(MX6PAD(KEY_COL2__GPIO4_IO10), WEAK_PULLUP),

	/* UART5 - J6 data connector */
	NEW_PAD_CTRL(MX6PAD(KEY_COL1__UART5_TX_DATA), UART_PAD_CTRL),	/* J6, pin 5 */
	NEW_PAD_CTRL(MX6PAD(KEY_ROW1__UART5_RX_DATA), UART_PAD_CTRL),	/* J6, pin 6 */
	NEW_PAD_CTRL(MX6PAD(SD1_CMD__GPIO1_IO18), WEAK_PULLUP),		/* J6, pin 8 - Data detect */
#define GP_J6_POWER_EN	IMX_GPIO_NR(1, 16)
	NEW_PAD_CTRL(MX6PAD(SD1_DAT0__GPIO1_IO16), WEAK_PULLUP),		/* J6, Power enable */
	NEW_PAD_CTRL(MX6PAD(GPIO_4__GPIO1_IO04), WEAK_PULLUP),		/* J6, pin 16 */

	/* USBH1 */
	NEW_PAD_CTRL(MX6PAD(EIM_D30__USB_H1_OC), WEAK_PULLUP),	/* low indicates over current */
#define GP_USB_HUB_RESET	IMX_GPIO_NR(7, 12)
	NEW_PAD_CTRL(MX6PAD(GPIO_17__GPIO7_IO12), OUTPUT_40OHM),	/* USB Hub Reset for USB2512 4 port hub */

	/* USBOTG */
	NEW_PAD_CTRL(MX6PAD(GPIO_1__USB_OTG_ID), OTGID_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(KEY_COL4__USB_OTG_OC), WEAK_PULLUP),	/* low indicates over current */
#define GP_USB_OTG_PWR		IMX_GPIO_NR(3, 22)
	NEW_PAD_CTRL(MX6PAD(EIM_D22__GPIO3_IO22), OUTPUT_40OHM),

	/* USDHC4 - eMMC */
	SD_PINS8(4, USDHC_PAD_CTRL_50MHZ),
#define GP_EMMC_RESET	IMX_GPIO_NR(6, 7)
	NEW_PAD_CTRL(MX6PAD(NANDF_CLE__GPIO6_IO07), OUTPUT_40OHM),	/* eMMC reset */

	/* 1-wire J11 pin 22, J3 pin 8, J6 pin 9*/
#define GP_1WIRE_EN	IMX_GPIO_NR(1, 21)
	NEW_PAD_CTRL(MX6PAD(SD1_DAT3__GPIO1_IO21), WEAK_PULLUP),

	/* Microcontroller KL04Z32TFK4 on I2C1 */
#define GP_KL04_SWD_CLK	IMX_GPIO_NR(1, 0)
	NEW_PAD_CTRL(MX6PAD(GPIO_0__GPIO1_IO00), WEAK_PULLDN),	/* SWD_CLK */
#define GP_KL04_SWD_IO	IMX_GPIO_NR(1, 2)
	NEW_PAD_CTRL(MX6PAD(GPIO_2__GPIO1_IO02), WEAK_PULLUP),	/* SWD_IO */
#define GP_KL04_RESET	IMX_GPIO_NR(5, 20)
	NEW_PAD_CTRL(MX6PAD(CSI0_DATA_EN__GPIO5_IO20), WEAK_PULLDN),
#define GP_KL04_PROGRAM	IMX_GPIO_NR(5, 22)
	NEW_PAD_CTRL(MX6PAD(CSI0_DAT4__GPIO5_IO22), WEAK_PULLDN),
#define GP_KL04_IRQ	IMX_GPIO_NR(5, 29)
	NEW_PAD_CTRL(MX6PAD(CSI0_DAT11__GPIO5_IO29), WEAK_PULLUP),

	/* Make sure these no-connects don't wiggle */
	NEW_PAD_CTRL(MX6PAD(DI0_DISP_CLK__GPIO4_IO16), WEAK_PULLUP),
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT12__GPIO5_IO06), WEAK_PULLUP),
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT20__GPIO5_IO14), WEAK_PULLUP),
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT21__GPIO5_IO15), WEAK_PULLUP),
	NEW_PAD_CTRL(MX6PAD(DISP0_DAT22__GPIO5_IO16), WEAK_PULLUP),
};

static const iomux_v3_cfg_t MX6NAME(enet_pads1)[] = {
	/* pin 35 - 1 (PHY_AD2) on reset */
	NEW_PAD_CTRL(MX6PAD(RGMII_RXC__GPIO6_IO30), OUTPUT_40OHM),
	/* pin 32 - 1 - (MODE0) all */
	NEW_PAD_CTRL(MX6PAD(RGMII_RD0__GPIO6_IO25), OUTPUT_40OHM),
	/* pin 31 - 1 - (MODE1) all */
	NEW_PAD_CTRL(MX6PAD(RGMII_RD1__GPIO6_IO27), OUTPUT_40OHM),
	/* pin 28 - 1 - (MODE2) all */
	NEW_PAD_CTRL(MX6PAD(RGMII_RD2__GPIO6_IO28), OUTPUT_40OHM),
	/* pin 27 - 1 - (MODE3) all */
	NEW_PAD_CTRL(MX6PAD(RGMII_RD3__GPIO6_IO29), OUTPUT_40OHM),
	/* pin 33 - 1 - (CLK125_EN) 125Mhz clockout enabled */
	NEW_PAD_CTRL(MX6PAD(RGMII_RX_CTL__GPIO6_IO24), OUTPUT_40OHM),
};

static const iomux_v3_cfg_t MX6NAME(enet_pads2)[] = {
	NEW_PAD_CTRL(MX6PAD(RGMII_RXC__RGMII_RXC), ENET_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(RGMII_RD0__RGMII_RD0), ENET_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(RGMII_RD1__RGMII_RD1), ENET_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(RGMII_RD2__RGMII_RD2), ENET_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(RGMII_RD3__RGMII_RD3), ENET_PAD_CTRL),
	NEW_PAD_CTRL(MX6PAD(RGMII_RX_CTL__RGMII_RX_CTL), ENET_PAD_CTRL),
};

/*
 *
 */
#define PC I2C_PAD_CTRL

struct i2c_pads_info MX6NAME(i2c_pad_info)[] = {
{
	/* I2C1, SGTL5000 */
	.scl = {
		.i2c_mode = NEW_PAD_CTRL(MX6PAD(EIM_D21__I2C1_SCL), PC),
		.gpio_mode = NEW_PAD_CTRL(MX6PAD(EIM_D21__GPIO3_IO21), PC),
		.gp = IMX_GPIO_NR(3, 21)
	},
	.sda = {
		.i2c_mode = NEW_PAD_CTRL(MX6PAD(EIM_D28__I2C1_SDA), PC),
		.gpio_mode = NEW_PAD_CTRL(MX6PAD(EIM_D28__GPIO3_IO28), PC),
		.gp = IMX_GPIO_NR(3, 28)
	}
}, {
	/* I2C2 Camera, MIPI */
	.scl = {
		.i2c_mode = NEW_PAD_CTRL(MX6PAD(KEY_COL3__I2C2_SCL), PC),
		.gpio_mode = NEW_PAD_CTRL(MX6PAD(KEY_COL3__GPIO4_IO12), PC),
		.gp = IMX_GPIO_NR(4, 12)
	},
	.sda = {
		.i2c_mode = NEW_PAD_CTRL(MX6PAD(KEY_ROW3__I2C2_SDA), PC),
		.gpio_mode = NEW_PAD_CTRL(MX6PAD(KEY_ROW3__GPIO4_IO13), PC),
		.gp = IMX_GPIO_NR(4, 13)
	}
}, {
	/* I2C3, J15 - RGB connector */
	.scl = {
		.i2c_mode = NEW_PAD_CTRL(MX6PAD(GPIO_5__I2C3_SCL), PC),
		.gpio_mode = NEW_PAD_CTRL(MX6PAD(GPIO_5__GPIO1_IO05), PC),
		.gp = IMX_GPIO_NR(1, 5)
	},
	.sda = {
		.i2c_mode = NEW_PAD_CTRL(MX6PAD(GPIO_16__I2C3_SDA), PC),
		.gpio_mode = NEW_PAD_CTRL(MX6PAD(GPIO_16__GPIO7_IO11), PC),
		.gp = IMX_GPIO_NR(7, 11)
	}
}
};
