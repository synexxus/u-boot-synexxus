/*								/*
 * Copyright (C) 2010-2013 Freescale Semiconductor, Inc.	 * Copyright (C) 2010-2013 Freescale Semiconductor, Inc.
 * Copyright (C) 2013, Boundary Devices <info@boundarydevices	 * Copyright (C) 2013, Boundary Devices <info@boundarydevices
 *   Extended by John Reep				      |	 *
 * SPDX-License-Identifier:	GPL-2.0+			 * SPDX-License-Identifier:	GPL-2.0+
							      <
							      <
 */								 */

#include <common.h>						#include <common.h>
#include <asm/io.h>						#include <asm/io.h>
#include <asm/arch/clock.h>					#include <asm/arch/clock.h>
#include <asm/arch/imx-regs.h>					#include <asm/arch/imx-regs.h>
#include <asm/arch/iomux.h>					#include <asm/arch/iomux.h>
#include <asm/arch/sys_proto.h>					#include <asm/arch/sys_proto.h>
#include <malloc.h>						#include <malloc.h>
#include <asm/arch/mx6-pins.h>					#include <asm/arch/mx6-pins.h>
#include <asm/errno.h>						#include <asm/errno.h>
#include <asm/gpio.h>						#include <asm/gpio.h>
#include <asm/imx-common/iomux-v3.h>				#include <asm/imx-common/iomux-v3.h>
#include <asm/imx-common/mxc_i2c.h>				#include <asm/imx-common/mxc_i2c.h>
#include <asm/imx-common/sata.h>				#include <asm/imx-common/sata.h>
#include <asm/imx-common/boot_mode.h>				#include <asm/imx-common/boot_mode.h>
#include <asm/imx-common/video.h>				#include <asm/imx-common/video.h>
#include <mmc.h>						#include <mmc.h>
#include <fsl_esdhc.h>						#include <fsl_esdhc.h>
#include <micrel.h>						#include <micrel.h>
#include <miiphy.h>						#include <miiphy.h>
#include <netdev.h>						#include <netdev.h>
#include <linux/fb.h>					      <
#include <ipu_pixfmt.h>					      <
#include <asm/arch/crm_regs.h>					#include <asm/arch/crm_regs.h>
#include <asm/arch/mxc_hdmi.h>					#include <asm/arch/mxc_hdmi.h>
#include <i2c.h>						#include <i2c.h>
							      >	#include <input.h>
							      >	#include <netdev.h>
							      >	#include <splash.h>

DECLARE_GLOBAL_DATA_PTR;					DECLARE_GLOBAL_DATA_PTR;
							      |	#define GP_USB_OTG_PWR	IMX_GPIO_NR(3, 22)
//#if defined(CONFIG_ARISTEUS)				      <
#define GP_USB_OTG_PWR	IMX_GPIO_NR(4, 15)		// GP <
//#else							      <
//#define GP_USB_OTG_PWR	IMX_GPIO_NR(3, 22)	      <
//#endif						      <

#define UART_PAD_CTRL  (PAD_CTL_PUS_100K_UP |			#define UART_PAD_CTRL  (PAD_CTL_PUS_100K_UP |		
	PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm |				PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm |		
	PAD_CTL_SRE_FAST  | PAD_CTL_HYS)				PAD_CTL_SRE_FAST  | PAD_CTL_HYS)

#define USDHC_PAD_CTRL (PAD_CTL_PUS_47K_UP |			#define USDHC_PAD_CTRL (PAD_CTL_PUS_47K_UP |		
	PAD_CTL_SPEED_LOW | PAD_CTL_DSE_80ohm |				PAD_CTL_SPEED_LOW | PAD_CTL_DSE_80ohm |		
	PAD_CTL_SRE_FAST  | PAD_CTL_HYS)				PAD_CTL_SRE_FAST  | PAD_CTL_HYS)

#define ENET_PAD_CTRL  (PAD_CTL_PUS_100K_UP |			#define ENET_PAD_CTRL  (PAD_CTL_PUS_100K_UP |		
	PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm | PAD_CTL_HYS)		PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm | PAD_CTL_HYS)

#define SPI_PAD_CTRL (PAD_CTL_HYS | PAD_CTL_SPEED_MED |		#define SPI_PAD_CTRL (PAD_CTL_HYS | PAD_CTL_SPEED_MED |	
	PAD_CTL_DSE_40ohm     | PAD_CTL_SRE_FAST)			PAD_CTL_DSE_40ohm     | PAD_CTL_SRE_FAST)

#define BUTTON_PAD_CTRL (PAD_CTL_PUS_100K_UP |			#define BUTTON_PAD_CTRL (PAD_CTL_PUS_100K_UP |		
	PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm | PAD_CTL_HYS)		PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm | PAD_CTL_HYS)

#define I2C_PAD_CTRL	(PAD_CTL_PUS_100K_UP |			#define I2C_PAD_CTRL	(PAD_CTL_PUS_100K_UP |		
	PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm | PAD_CTL_HYS |		PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm | PAD_CTL_HYS |
	PAD_CTL_ODE | PAD_CTL_SRE_FAST)					PAD_CTL_ODE | PAD_CTL_SRE_FAST)

#define WEAK_PULLUP	(PAD_CTL_PUS_100K_UP |			#define WEAK_PULLUP	(PAD_CTL_PUS_100K_UP |		
	PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm | PAD_CTL_HYS |		PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm | PAD_CTL_HYS |
	PAD_CTL_SRE_SLOW)						PAD_CTL_SRE_SLOW)

#define WEAK_PULLDOWN	(PAD_CTL_PUS_100K_DOWN |		#define WEAK_PULLDOWN	(PAD_CTL_PUS_100K_DOWN |	
	PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm |				PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm |		
	PAD_CTL_HYS | PAD_CTL_SRE_SLOW)					PAD_CTL_HYS | PAD_CTL_SRE_SLOW)

#define OUTPUT_40OHM (PAD_CTL_SPEED_MED|PAD_CTL_DSE_40ohm)	#define OUTPUT_40OHM (PAD_CTL_SPEED_MED|PAD_CTL_DSE_40ohm)

/**							      <
	It appears CONFIG_DDR_MB is linked to DDR_MB=1024 fou <
 */							      <
int dram_init(void)						int dram_init(void)
{								{
	gd->ram_size = ((ulong)CONFIG_DDR_MB * 1024 * 1024);		gd->ram_size = ((ulong)CONFIG_DDR_MB * 1024 * 1024);

	return 0;							return 0;
}								}

/*							      |	static iomux_v3_cfg_t const uart1_pads[] = {
	Modified Comment 01/28/2014			      <
	SABRELITE, Nitrogen6x, and Aristeus all use SD3_DAT6/ <
							      <
	This efficiently allows the terminal to be used and c <
 */							      <
iomux_v3_cfg_t const uart1_pads[] = {			      <
	MX6_PAD_SD3_DAT6__UART1_RX_DATA | MUX_PAD_CTRL(UART_P		MX6_PAD_SD3_DAT6__UART1_RX_DATA | MUX_PAD_CTRL(UART_P
	MX6_PAD_SD3_DAT7__UART1_TX_DATA | MUX_PAD_CTRL(UART_P		MX6_PAD_SD3_DAT7__UART1_TX_DATA | MUX_PAD_CTRL(UART_P
};								};

/*							      |	/* #define CONFIG_SILENT_UART */
	Modified 01/28/2014 for Aristeus 		      |	static iomux_v3_cfg_t const uart2_pads[] = {
	UART2 is confgiured from the original of the SABRELIT |	#ifndef CONFIG_SILENT_UART
 */							      |		MX6_PAD_EIM_D26__UART2_TX_DATA | MUX_PAD_CTRL(UART_PA
iomux_v3_cfg_t const uart2_pads[] = {			      |		MX6_PAD_EIM_D27__UART2_RX_DATA | MUX_PAD_CTRL(UART_PA
	// original commented				      |	#else
	//#ifdef CONFIG_ARISTEUS			      |		MX6_PAD_EIM_D26__GPIO3_IO26 | MUX_PAD_CTRL(UART_PAD_C
	MX6_PAD_GPIO_7__UART2_TX_DATA | MUX_PAD_CTRL(UART_PAD |		MX6_PAD_EIM_D27__GPIO3_IO27 | MUX_PAD_CTRL(UART_PAD_C
	MX6_PAD_GPIO_8__UART2_RX_DATA | MUX_PAD_CTRL(UART_PAD |	#endif
	//#else						      <
	//MX6_PAD_EIM_D26__UART2_TX_DATA | MUX_PAD_CTRL(UART_ <
	//MX6_PAD_EIM_D27__UART2_RX_DATA | MUX_PAD_CTRL(UART_ <
	//#endif					      <
};							      <
							      <
//#ifdef CONFIG_ARISTEUS				      <
/*							      <
	Added 01/28/2014 for Aristeus 			      <
	UART3 is an added UART interface communication port   <
 */							      <
iomux_v3_cfg_t const uart3_pads[] = {			      <
							      <
	MX6_PAD_EIM_D24__UART3_TX_DATA | MUX_PAD_CTRL(UART_PA <
	MX6_PAD_EIM_D25__UART3_RX_DATA| MUX_PAD_CTRL(UART_PAD <
};								};
//#endif						      <

#define PC MUX_PAD_CTRL(I2C_PAD_CTRL)				#define PC MUX_PAD_CTRL(I2C_PAD_CTRL)

/* Modified 01/28/2014 for Aristeus			      |	/* I2C1, SGTL5000 */
   I2C1: 						      |	static struct i2c_pads_info i2c_pad_info0 = {
		Known Communication Devices:		      <
		ADV7343 	(configuration required)      <
		SMSC2517i 	(No configuration required)   <
		LVDS_I2C	(LVDS EEPROM for display conf <
*/							      <
struct i2c_pads_info i2c_pad_info0 = {			      <
	.scl = {							.scl = {
		.i2c_mode = MX6_PAD_EIM_D21__I2C1_SCL | PC,			.i2c_mode = MX6_PAD_EIM_D21__I2C1_SCL | PC,
		.gpio_mode = MX6_PAD_EIM_D21__GPIO3_IO21 | PC			.gpio_mode = MX6_PAD_EIM_D21__GPIO3_IO21 | PC
		.gp = IMX_GPIO_NR(3, 21)					.gp = IMX_GPIO_NR(3, 21)
	},								},
	.sda = {							.sda = {
		.i2c_mode = MX6_PAD_EIM_D28__I2C1_SDA | PC,			.i2c_mode = MX6_PAD_EIM_D28__I2C1_SDA | PC,
		.gpio_mode = MX6_PAD_EIM_D28__GPIO3_IO28 | PC			.gpio_mode = MX6_PAD_EIM_D28__GPIO3_IO28 | PC
		.gp = IMX_GPIO_NR(3, 28)					.gp = IMX_GPIO_NR(3, 28)
	}								}
};								};

/* Modified 01/28/2014 for Aristeus			      |	/* I2C2 Camera, MIPI */
   I2C2: 						      |	static struct i2c_pads_info i2c_pad_info1 = {
		Known Communication Devices:		      <
		Outboard on COM Express Header		      <
		PEX8606 PCIe Switch			      <
		PMIC_I2C (MMPF0100)			      <
		HDMI_I2C	(HDMI EEPROM for EDID)	      <
*/							      <
struct i2c_pads_info i2c_pad_info1 = {			      <
	.scl = {							.scl = {
		.i2c_mode = MX6_PAD_KEY_COL3__I2C2_SCL | PC,			.i2c_mode = MX6_PAD_KEY_COL3__I2C2_SCL | PC,
		.gpio_mode = MX6_PAD_KEY_COL3__GPIO4_IO12 | P			.gpio_mode = MX6_PAD_KEY_COL3__GPIO4_IO12 | P
		.gp = IMX_GPIO_NR(4, 12)					.gp = IMX_GPIO_NR(4, 12)
	},								},
	.sda = {							.sda = {
		.i2c_mode = MX6_PAD_KEY_ROW3__I2C2_SDA | PC,			.i2c_mode = MX6_PAD_KEY_ROW3__I2C2_SDA | PC,
		.gpio_mode = MX6_PAD_KEY_ROW3__GPIO4_IO13 | P			.gpio_mode = MX6_PAD_KEY_ROW3__GPIO4_IO13 | P
		.gp = IMX_GPIO_NR(4, 13)					.gp = IMX_GPIO_NR(4, 13)
	}								}
};								};

/* Modified 01/28/2014 for Aristeus			      |	/* I2C3, J15 - RGB connector */
   I2C2: 						      |	static struct i2c_pads_info i2c_pad_info2 = {
		Known Communication Devices:		      <
		Outboard on COM Express Header (SMBus)	      <
		VGA_I2C		(VGA EEPROM for EDID - needed <
*/							      <
struct i2c_pads_info i2c_pad_info2 = {			      <
	.scl = {							.scl = {
		.i2c_mode = MX6_PAD_GPIO_5__I2C3_SCL | PC,			.i2c_mode = MX6_PAD_GPIO_5__I2C3_SCL | PC,
		.gpio_mode = MX6_PAD_GPIO_5__GPIO1_IO05 | PC,			.gpio_mode = MX6_PAD_GPIO_5__GPIO1_IO05 | PC,
		.gp = IMX_GPIO_NR(1, 5)						.gp = IMX_GPIO_NR(1, 5)
	},								},
	.sda = {							.sda = {
		.i2c_mode = MX6_PAD_GPIO_16__I2C3_SDA | PC,			.i2c_mode = MX6_PAD_GPIO_16__I2C3_SDA | PC,
		.gpio_mode = MX6_PAD_GPIO_16__GPIO7_IO11 | PC			.gpio_mode = MX6_PAD_GPIO_16__GPIO7_IO11 | PC
		.gp = IMX_GPIO_NR(7, 11)					.gp = IMX_GPIO_NR(7, 11)
	}								}
};								};

/* Modified 01/29/2014					      |	static iomux_v3_cfg_t const usdhc2_pads[] = {
	SD3 goes out to the COM Express Type 6 Header	      |		MX6_PAD_SD2_CLK__SD2_CLK   | MUX_PAD_CTRL(USDHC_PAD_C
	This can be interfaced to an SD or microSD card slot  |		MX6_PAD_SD2_CMD__SD2_CMD   | MUX_PAD_CTRL(USDHC_PAD_C
*/							      |		MX6_PAD_SD2_DAT0__SD2_DATA0 | MUX_PAD_CTRL(USDHC_PAD_
iomux_v3_cfg_t const usdhc3_pads[] = {			      |		MX6_PAD_SD2_DAT1__SD2_DATA1 | MUX_PAD_CTRL(USDHC_PAD_
							      >		MX6_PAD_SD2_DAT2__SD2_DATA2 | MUX_PAD_CTRL(USDHC_PAD_
							      >		MX6_PAD_SD2_DAT3__SD2_DATA3 | MUX_PAD_CTRL(USDHC_PAD_
							      >	};
							      >
							      >	static iomux_v3_cfg_t const usdhc3_pads[] = {
	MX6_PAD_SD3_CLK__SD3_CLK   | MUX_PAD_CTRL(USDHC_PAD_C		MX6_PAD_SD3_CLK__SD3_CLK   | MUX_PAD_CTRL(USDHC_PAD_C
	MX6_PAD_SD3_CMD__SD3_CMD   | MUX_PAD_CTRL(USDHC_PAD_C		MX6_PAD_SD3_CMD__SD3_CMD   | MUX_PAD_CTRL(USDHC_PAD_C
	MX6_PAD_SD3_DAT0__SD3_DATA0 | MUX_PAD_CTRL(USDHC_PAD_		MX6_PAD_SD3_DAT0__SD3_DATA0 | MUX_PAD_CTRL(USDHC_PAD_
	MX6_PAD_SD3_DAT1__SD3_DATA1 | MUX_PAD_CTRL(USDHC_PAD_		MX6_PAD_SD3_DAT1__SD3_DATA1 | MUX_PAD_CTRL(USDHC_PAD_
	MX6_PAD_SD3_DAT2__SD3_DATA2 | MUX_PAD_CTRL(USDHC_PAD_		MX6_PAD_SD3_DAT2__SD3_DATA2 | MUX_PAD_CTRL(USDHC_PAD_
	MX6_PAD_SD3_DAT3__SD3_DATA3 | MUX_PAD_CTRL(USDHC_PAD_		MX6_PAD_SD3_DAT3__SD3_DATA3 | MUX_PAD_CTRL(USDHC_PAD_
	MX6_PAD_SD3_DAT5__GPIO7_IO00    | MUX_PAD_CTRL(NO_PAD		MX6_PAD_SD3_DAT5__GPIO7_IO00    | MUX_PAD_CTRL(NO_PAD
	/* Could support WP detection with		      <
	 MX6_PAD_SD3_DAT4_GPIO7_IO01 | MUX_PAD_CTRL(NO_PAD_CT <
	*/						      <
};								};

/* Modified 01/29/1024					      |	static iomux_v3_cfg_t const usdhc4_pads[] = {
	SD4 goes to a microSD card slot on the COM Express mo <
*/							      <
iomux_v3_cfg_t const usdhc4_pads[] = {			      <
	MX6_PAD_SD4_CLK__SD4_CLK   | MUX_PAD_CTRL(USDHC_PAD_C		MX6_PAD_SD4_CLK__SD4_CLK   | MUX_PAD_CTRL(USDHC_PAD_C
	MX6_PAD_SD4_CMD__SD4_CMD   | MUX_PAD_CTRL(USDHC_PAD_C		MX6_PAD_SD4_CMD__SD4_CMD   | MUX_PAD_CTRL(USDHC_PAD_C
	MX6_PAD_SD4_DAT0__SD4_DATA0 | MUX_PAD_CTRL(USDHC_PAD_		MX6_PAD_SD4_DAT0__SD4_DATA0 | MUX_PAD_CTRL(USDHC_PAD_
	MX6_PAD_SD4_DAT1__SD4_DATA1 | MUX_PAD_CTRL(USDHC_PAD_		MX6_PAD_SD4_DAT1__SD4_DATA1 | MUX_PAD_CTRL(USDHC_PAD_
	MX6_PAD_SD4_DAT2__SD4_DATA2 | MUX_PAD_CTRL(USDHC_PAD_		MX6_PAD_SD4_DAT2__SD4_DATA2 | MUX_PAD_CTRL(USDHC_PAD_
	MX6_PAD_SD4_DAT3__SD4_DATA3 | MUX_PAD_CTRL(USDHC_PAD_		MX6_PAD_SD4_DAT3__SD4_DATA3 | MUX_PAD_CTRL(USDHC_PAD_
	MX6_PAD_NANDF_D6__GPIO2_IO06    | MUX_PAD_CTRL(NO_PAD		MX6_PAD_NANDF_D6__GPIO2_IO06    | MUX_PAD_CTRL(NO_PAD
	/* Could support WP detection with		      <
	 MX6_PAD_NANDF_D7_GPIO2_IO07 | MUX_PAD_CTRL(NO_PAD_CT <
	*/						      <
};							      <
							      <
/* Added SD2 support on Aristeus.  Not supported on SABRELITE <
	SD2 is an onboard microSD slot			      <
							      <
	Added: 01/29/2014				      <
	SD2 is supported on the COM Express through the stand <
*/							      <
//#ifdef CONFIG_ARISTEUS				      <
iomux_v3_cfg_t const usdhc2_pads[] = {			      <
	MX6_PAD_SD2_CLK__SD2_CLK   | MUX_PAD_CTRL(USDHC_PAD_C <
	MX6_PAD_SD2_CMD__SD2_CMD   | MUX_PAD_CTRL(USDHC_PAD_C <
	MX6_PAD_SD2_DAT0__SD2_DATA0 | MUX_PAD_CTRL(USDHC_PAD_ <
	MX6_PAD_SD2_DAT1__SD2_DATA1 | MUX_PAD_CTRL(USDHC_PAD_ <
	MX6_PAD_SD2_DAT2__SD2_DATA2 | MUX_PAD_CTRL(USDHC_PAD_ <
	MX6_PAD_SD2_DAT3__SD2_DATA3 | MUX_PAD_CTRL(USDHC_PAD_ <
	MX6_PAD_GPIO_4__GPIO1_IO04    | MUX_PAD_CTRL(NO_PAD_C <
	/* Could support WP detection with		      <
	 MX6_PAD_GPIO_2__GPIO1_IO02 | MUX_PAD_CTRL(NO_PAD_CTR <
	*/						      <
};								};
//#endif						      <

/*							      |	static iomux_v3_cfg_t const enet_pads1[] = {
							      <
 */							      <
iomux_v3_cfg_t const enet_pads1[] = {			      <
	MX6_PAD_ENET_MDIO__ENET_MDIO		| MUX_PAD_CTR		MX6_PAD_ENET_MDIO__ENET_MDIO		| MUX_PAD_CTR
	MX6_PAD_ENET_MDC__ENET_MDC		| MUX_PAD_CTR		MX6_PAD_ENET_MDC__ENET_MDC		| MUX_PAD_CTR
	MX6_PAD_RGMII_TXC__RGMII_TXC	| MUX_PAD_CTRL(ENET_P		MX6_PAD_RGMII_TXC__RGMII_TXC	| MUX_PAD_CTRL(ENET_P
	MX6_PAD_RGMII_TD0__RGMII_TD0	| MUX_PAD_CTRL(ENET_P		MX6_PAD_RGMII_TD0__RGMII_TD0	| MUX_PAD_CTRL(ENET_P
	MX6_PAD_RGMII_TD1__RGMII_TD1	| MUX_PAD_CTRL(ENET_P		MX6_PAD_RGMII_TD1__RGMII_TD1	| MUX_PAD_CTRL(ENET_P
	MX6_PAD_RGMII_TD2__RGMII_TD2	| MUX_PAD_CTRL(ENET_P		MX6_PAD_RGMII_TD2__RGMII_TD2	| MUX_PAD_CTRL(ENET_P
	MX6_PAD_RGMII_TD3__RGMII_TD3	| MUX_PAD_CTRL(ENET_P		MX6_PAD_RGMII_TD3__RGMII_TD3	| MUX_PAD_CTRL(ENET_P
	MX6_PAD_RGMII_TX_CTL__RGMII_TX_CTL	| MUX_PAD_CTR		MX6_PAD_RGMII_TX_CTL__RGMII_TX_CTL	| MUX_PAD_CTR
	MX6_PAD_ENET_REF_CLK__ENET_TX_CLK	| MUX_PAD_CTR		MX6_PAD_ENET_REF_CLK__ENET_TX_CLK	| MUX_PAD_CTR
	/* pin 35 - 1 (PHY_AD2) on reset */				/* pin 35 - 1 (PHY_AD2) on reset */
	MX6_PAD_RGMII_RXC__GPIO6_IO30		| MUX_PAD_CTR		MX6_PAD_RGMII_RXC__GPIO6_IO30		| MUX_PAD_CTR
	/* pin 32 - 1 - (MODE0) all */					/* pin 32 - 1 - (MODE0) all */
	MX6_PAD_RGMII_RD0__GPIO6_IO25		| MUX_PAD_CTR		MX6_PAD_RGMII_RD0__GPIO6_IO25		| MUX_PAD_CTR
	/* pin 31 - 1 - (MODE1) all */					/* pin 31 - 1 - (MODE1) all */
	MX6_PAD_RGMII_RD1__GPIO6_IO27		| MUX_PAD_CTR		MX6_PAD_RGMII_RD1__GPIO6_IO27		| MUX_PAD_CTR
	/* pin 28 - 1 - (MODE2) all */					/* pin 28 - 1 - (MODE2) all */
	MX6_PAD_RGMII_RD2__GPIO6_IO28		| MUX_PAD_CTR		MX6_PAD_RGMII_RD2__GPIO6_IO28		| MUX_PAD_CTR
	/* pin 27 - 1 - (MODE3) all */					/* pin 27 - 1 - (MODE3) all */
	MX6_PAD_RGMII_RD3__GPIO6_IO29		| MUX_PAD_CTR		MX6_PAD_RGMII_RD3__GPIO6_IO29		| MUX_PAD_CTR
	/* pin 33 - 1 - (CLK125_EN) 125Mhz clockout enabled *		/* pin 33 - 1 - (CLK125_EN) 125Mhz clockout enabled *
	MX6_PAD_RGMII_RX_CTL__GPIO6_IO24	| MUX_PAD_CTR		MX6_PAD_RGMII_RX_CTL__GPIO6_IO24	| MUX_PAD_CTR
	/* pin 42 PHY nRST */						/* pin 42 PHY nRST */
	//#if defined(CONFIG_ARISTEUS)			      |		MX6_PAD_EIM_D23__GPIO3_IO23		| MUX_PAD_CTR
	MX6_PAD_ENET_CRS_DV__GPIO1_IO25		| MUX_PAD_CTR |		MX6_PAD_ENET_RXD0__GPIO1_IO27		| MUX_PAD_CTR
	#define _RGMII_nRST_GP_ 1			      <
	#define _RGMII_nRST_IO_	25			      <
	//#elif defined(CONFIG_SABRELITE)		      <
	//MX6_PAD_EIM_D23__GPIO3_IO23		| MUX_PAD_CTR <
	//#define _RGMII_nRST_GP_ 3			      <
	//#define _RGMII_nRST_IO_	23		      <
	//#else						      <
	//MX6_PAD_ENET_RXD0__GPIO1_IO27		| MUX_PAD_CTR <
	//#define _RGMII_nRST_GP_ 1			      <
	//#define _RGMII_nRST_IO_	27		      <
	//#endif					      <
};								};

iomux_v3_cfg_t const enet_pads2[] = {			      |	static iomux_v3_cfg_t const enet_pads2[] = {
	MX6_PAD_RGMII_RXC__RGMII_RXC	| MUX_PAD_CTRL(ENET_P		MX6_PAD_RGMII_RXC__RGMII_RXC	| MUX_PAD_CTRL(ENET_P
	MX6_PAD_RGMII_RD0__RGMII_RD0	| MUX_PAD_CTRL(ENET_P		MX6_PAD_RGMII_RD0__RGMII_RD0	| MUX_PAD_CTRL(ENET_P
	MX6_PAD_RGMII_RD1__RGMII_RD1	| MUX_PAD_CTRL(ENET_P		MX6_PAD_RGMII_RD1__RGMII_RD1	| MUX_PAD_CTRL(ENET_P
	MX6_PAD_RGMII_RD2__RGMII_RD2	| MUX_PAD_CTRL(ENET_P		MX6_PAD_RGMII_RD2__RGMII_RD2	| MUX_PAD_CTRL(ENET_P
	MX6_PAD_RGMII_RD3__RGMII_RD3	| MUX_PAD_CTRL(ENET_P		MX6_PAD_RGMII_RD3__RGMII_RD3	| MUX_PAD_CTRL(ENET_P
	MX6_PAD_RGMII_RX_CTL__RGMII_RX_CTL	| MUX_PAD_CTR		MX6_PAD_RGMII_RX_CTL__RGMII_RX_CTL	| MUX_PAD_CTR
};								};

//#if defined(CONFIG_ARISTEUS)				      <
/* 							      <
	Moves USB_OTG_ID to ENET_RX_ER pad and USB_H1_OC      <
 */							      <
static iomux_v3_cfg_t const misc_pads[] = {		      <
	MX6_PAD_ENET_RX_ER__USB_OTG_ID		| MUX_PAD_CTR <
	MX6_PAD_KEY_COL4__USB_OTG_OC		| MUX_PAD_CTR <
	MX6_PAD_GPIO_3__USB_H1_OC		| MUX_PAD_CTR <
	/* OTG Power enable */				      <
	MX6_PAD_KEY_ROW4__USB_OTG_PWR		| MUX_PAD_CTR <
};							      <
/*#else							      <
static iomux_v3_cfg_t const misc_pads[] = {			static iomux_v3_cfg_t const misc_pads[] = {
	MX6_PAD_GPIO_1__USB_OTG_ID		| MUX_PAD_CTR		MX6_PAD_GPIO_1__USB_OTG_ID		| MUX_PAD_CTR
	MX6_PAD_KEY_COL4__USB_OTG_OC		| MUX_PAD_CTR		MX6_PAD_KEY_COL4__USB_OTG_OC		| MUX_PAD_CTR
	MX6_PAD_EIM_D30__USB_H1_OC		| MUX_PAD_CTR		MX6_PAD_EIM_D30__USB_H1_OC		| MUX_PAD_CTR
	// OTG Power enable 				      |		/* OTG Power enable */
	MX6_PAD_EIM_D22__GPIO3_IO22		| MUX_PAD_CTR		MX6_PAD_EIM_D22__GPIO3_IO22		| MUX_PAD_CTR
};								};
#endif							      |
*/							      <
/**							      <
	Added Configurations to this to be able to support mu <
	with one design type				      <
 */							      <
//#if defined(CONFIG_ARISTEUS)				      <
// We can override the pads this way			      <
//#else							      <
/* wl1271 pads on nitrogen6x */					/* wl1271 pads on nitrogen6x */
//iomux_v3_cfg_t const wl12xx_pads[] = {		      |	iomux_v3_cfg_t const wl12xx_pads[] = {
//	(MX6_PAD_NANDF_CS1__GPIO6_IO14 & ~MUX_PAD_CTRL_MASK)  |		(MX6_PAD_NANDF_CS1__GPIO6_IO14 & ~MUX_PAD_CTRL_MASK)
//		| MUX_PAD_CTRL(WEAK_PULLDOWN),		      |			| MUX_PAD_CTRL(WEAK_PULLDOWN),
//	(MX6_PAD_NANDF_CS2__GPIO6_IO15 & ~MUX_PAD_CTRL_MASK)  |		(MX6_PAD_NANDF_CS2__GPIO6_IO15 & ~MUX_PAD_CTRL_MASK)
//		| MUX_PAD_CTRL(OUTPUT_40OHM),		      |			| MUX_PAD_CTRL(OUTPUT_40OHM),
//	(MX6_PAD_NANDF_CS3__GPIO6_IO16 & ~MUX_PAD_CTRL_MASK)  |		(MX6_PAD_NANDF_CS3__GPIO6_IO16 & ~MUX_PAD_CTRL_MASK)
//		| MUX_PAD_CTRL(OUTPUT_40OHM),		      |			| MUX_PAD_CTRL(OUTPUT_40OHM),
//};							      |	};
//#define WL12XX_WL_IRQ_GP	IMX_GPIO_NR(6, 14)	      |	#define WL12XX_WL_IRQ_GP	IMX_GPIO_NR(6, 14)
//#define WL12XX_WL_ENABLE_GP	IMX_GPIO_NR(6, 15)	      |	#define WL12XX_WL_ENABLE_GP	IMX_GPIO_NR(6, 15)
//#define WL12XX_BT_ENABLE_GP	IMX_GPIO_NR(6, 16)	      |	#define WL12XX_BT_ENABLE_GP	IMX_GPIO_NR(6, 16)
//#endif						      |
							      |	/* Button assignments for J14 */
//#if defined(CONFIG_ARISTEUS)				      <
/* Added on 01/30/2014					      <
	Aristeus supports the android buttons but in differen <
 */							      <
static iomux_v3_cfg_t const button_pads[] = {			static iomux_v3_cfg_t const button_pads[] = {
	/* Menu */							/* Menu */
	MX6_PAD_NANDF_D1__GPIO2_IO01	| MUX_PAD_CTRL(BUTTON		MX6_PAD_NANDF_D1__GPIO2_IO01	| MUX_PAD_CTRL(BUTTON
	/* Back */							/* Back */
	MX6_PAD_NANDF_D2__GPIO2_IO02	| MUX_PAD_CTRL(BUTTON		MX6_PAD_NANDF_D2__GPIO2_IO02	| MUX_PAD_CTRL(BUTTON
	/* Labelled Search (mapped to Power under Android) */		/* Labelled Search (mapped to Power under Android) */
	MX6_PAD_NANDF_D3__GPIO2_IO03	| MUX_PAD_CTRL(BUTTON		MX6_PAD_NANDF_D3__GPIO2_IO03	| MUX_PAD_CTRL(BUTTON
	/* Home */							/* Home */
	MX6_PAD_NANDF_D0__GPIO2_IO00	| MUX_PAD_CTRL(BUTTON |		MX6_PAD_NANDF_D4__GPIO2_IO04	| MUX_PAD_CTRL(BUTTON
	/* Volume Down */						/* Volume Down */
	MX6_PAD_NANDF_RB0__GPIO6_IO10	| MUX_PAD_CTRL(BUTTON |		MX6_PAD_GPIO_19__GPIO4_IO05	| MUX_PAD_CTRL(BUTTON
	/* Volume Up */							/* Volume Up */
	MX6_PAD_NANDF_WP_B__GPIO6_IO09	| MUX_PAD_CTRL(BUTTON |		MX6_PAD_GPIO_18__GPIO7_IO13	| MUX_PAD_CTRL(BUTTON
};								};
//#else							      <
/* Button assignments for J14 */			      <
//static iomux_v3_cfg_t const button_pads[] = {		      <
	/* Menu */					      <
//	MX6_PAD_NANDF_D1__GPIO2_IO01	| MUX_PAD_CTRL(BUTTON <
	/* Back */					      <
//	MX6_PAD_NANDF_D2__GPIO2_IO02	| MUX_PAD_CTRL(BUTTON <
	/* Labelled Search (mapped to Power under Android) */ <
//	MX6_PAD_NANDF_D3__GPIO2_IO03	| MUX_PAD_CTRL(BUTTON <
	/* Home */					      <
//	MX6_PAD_NANDF_D4__GPIO2_IO04	| MUX_PAD_CTRL(BUTTON <
	/* Volume Down */				      <
//	MX6_PAD_GPIO_19__GPIO4_IO05	| MUX_PAD_CTRL(BUTTON <
	/* Volume Up */					      <
//	MX6_PAD_GPIO_18__GPIO7_IO13	| MUX_PAD_CTRL(BUTTON <
//};							      <
//#endif						      <

/*							      <
	FUNCTION: setup_iomux_enet(void)		      <
							      <
	INPUT: void					      <
	OUTPUT:						      <
	DESCRIPTION: initial setup for ENET descriptors and c <
 */							      <
static void setup_iomux_enet(void)				static void setup_iomux_enet(void)
{								{
	imx_iomux_v3_setup_multiple_pads(enet_pads1, ARRAY_SI |		gpio_direction_output(IMX_GPIO_NR(3, 23), 0); /* SABR
	udelay(20);					      |		gpio_direction_output(IMX_GPIO_NR(1, 27), 0); /* Nitr
	//gpio_direction_output(IMX_GPIO_NR(3, 23), 0); /* SA |		gpio_direction_output(IMX_GPIO_NR(6, 30), 1);
	//gpio_direction_output(IMX_GPIO_NR(1, 27), 0); /* Ni |		gpio_direction_output(IMX_GPIO_NR(6, 25), 1);
	gpio_direction_output(IMX_GPIO_NR(_RGMII_nRST_GP_, _R |		gpio_direction_output(IMX_GPIO_NR(6, 27), 1);
	/* Above 1 line: Now it is defined where the IO for n |		gpio_direction_output(IMX_GPIO_NR(6, 28), 1);
	gpio_direction_output(IMX_GPIO_NR(6, 30), 1);	/* RG |		gpio_direction_output(IMX_GPIO_NR(6, 29), 1);
	gpio_direction_output(IMX_GPIO_NR(6, 25), 1);	/* RG |		imx_iomux_v3_setup_multiple_pads(enet_pads1, ARRAY_SI
	gpio_direction_output(IMX_GPIO_NR(6, 27), 1);	/* RG |		gpio_direction_output(IMX_GPIO_NR(6, 24), 1);
	gpio_direction_output(IMX_GPIO_NR(6, 28), 1);	/* RG <
	gpio_direction_output(IMX_GPIO_NR(6, 29), 1);	/* RG <
	gpio_direction_output(IMX_GPIO_NR(6, 24), 1);	/* RG <

//puts("setup_iomux_enet: pre 10mS\n");			      <
	/* Need delay 10ms according to KSZ9021 spec */			/* Need delay 10ms according to KSZ9021 spec */
	udelay(1000 * 10);						udelay(1000 * 10);
//puts("setup_iomux_enet: post 10mS\n");		      |		gpio_set_value(IMX_GPIO_NR(3, 23), 1); /* SABRE Lite 
	gpio_set_value(IMX_GPIO_NR(_RGMII_nRST_GP_, _RGMII_nR |		gpio_set_value(IMX_GPIO_NR(1, 27), 1); /* Nitrogen6X 
	//gpio_set_value(IMX_GPIO_NR(3, 23), 1); /* SABRE Lit <
	//gpio_set_value(IMX_GPIO_NR(1, 27), 1); /* Nitrogen6 <

	/* Configure for RGMII*/			      <
	imx_iomux_v3_setup_multiple_pads(enet_pads2, ARRAY_SI		imx_iomux_v3_setup_multiple_pads(enet_pads2, ARRAY_SI
//puts("setup_iomux_enet: return\n");			      |		udelay(100);	/* Wait 100 us before using mii inter
}								}

/*							      |	static iomux_v3_cfg_t const usb_pads[] = {
	Goes to USB HUB RESET_B -- Managed to keep them the s <
							      <
 */							      <
iomux_v3_cfg_t const usb_pads[] = {			      <
	MX6_PAD_GPIO_17__GPIO7_IO12 | MUX_PAD_CTRL(NO_PAD_CTR		MX6_PAD_GPIO_17__GPIO7_IO12 | MUX_PAD_CTRL(NO_PAD_CTR
};								};

/* Updated on 01/30/2014*/				      <
static void setup_iomux_uart(void)				static void setup_iomux_uart(void)
{								{
	imx_iomux_v3_setup_multiple_pads(uart1_pads, ARRAY_SI		imx_iomux_v3_setup_multiple_pads(uart1_pads, ARRAY_SI
	imx_iomux_v3_setup_multiple_pads(uart2_pads, ARRAY_SI		imx_iomux_v3_setup_multiple_pads(uart2_pads, ARRAY_SI
							      <
//	#ifdef CONFIG_ARISTEUS				      <
	imx_iomux_v3_setup_multiple_pads(uart3_pads, ARRAY_SI <
	// Consider a downstream flag for UART3 or just use C <
//	#endif						      <
}								}

#ifdef CONFIG_USB_EHCI_MX6					#ifdef CONFIG_USB_EHCI_MX6
int board_ehci_hcd_init(int port)				int board_ehci_hcd_init(int port)
{								{
	imx_iomux_v3_setup_multiple_pads(usb_pads, ARRAY_SIZE		imx_iomux_v3_setup_multiple_pads(usb_pads, ARRAY_SIZE

	/* Reset USB hub */						/* Reset USB hub */
	gpio_direction_output(IMX_GPIO_NR(7, 12), 0);			gpio_direction_output(IMX_GPIO_NR(7, 12), 0);
	mdelay(2);							mdelay(2);
	gpio_set_value(IMX_GPIO_NR(7, 12), 1);				gpio_set_value(IMX_GPIO_NR(7, 12), 1);

	return 0;							return 0;
}								}

int board_ehci_power(int port, int on)				int board_ehci_power(int port, int on)
{								{
	if (port)							if (port)
		return 0;							return 0;
	gpio_set_value(GP_USB_OTG_PWR, on);				gpio_set_value(GP_USB_OTG_PWR, on);
	return 0;							return 0;
}								}
							      >
#endif								#endif

#ifdef CONFIG_FSL_ESDHC						#ifdef CONFIG_FSL_ESDHC
//#if defined(CONFIG_ARISTEUS)				      |	static struct fsl_esdhc_cfg usdhc_cfg[2] = {
struct fsl_esdhc_cfg usdhc_cfg[3] = {			      <
	{USDHC3_BASE_ADDR},						{USDHC3_BASE_ADDR},
	{USDHC4_BASE_ADDR},						{USDHC4_BASE_ADDR},
	{USDHC2_BASE_ADDR},				      <
};								};
//#else							      <
//struct fsl_esdhc_cfg usdhc_cfg[2] = {			      <
//	{USDHC3_BASE_ADDR},				      <
//	{USDHC4_BASE_ADDR},				      <
//};							      <
//#endif						      <

//#if defined(CONFIG_ARISTEUS)				      <
int board_mmc_getcd(struct mmc *mmc)				int board_mmc_getcd(struct mmc *mmc)
{								{
	struct fsl_esdhc_cfg *cfg = (struct fsl_esdhc_cfg *)m		struct fsl_esdhc_cfg *cfg = (struct fsl_esdhc_cfg *)m
	int ret = 0;					      |		int gp_cd = (cfg->esdhc_base == USDHC3_BASE_ADDR) ? I
							      >				IMX_GPIO_NR(2, 6);

	switch(cfg->esdhc_base){			      |		gpio_direction_input(gp_cd);
		case USDHC3_BASE_ADDR:			      |		return !gpio_get_value(gp_cd);
			gpio_direction_input(IMX_GPIO_NR(7, 0 <
			ret = !gpio_get_value(IMX_GPIO_NR(7,  <
			break;				      <
		case USDHC4_BASE_ADDR:			      <
			gpio_direction_input(IMX_GPIO_NR(2, 6 <
			ret = !gpio_get_value(IMX_GPIO_NR(2,  <
			break;				      <
		case USDHC2_BASE_ADDR:			      <
			// This is also the actual SD2_CD_B s <
			gpio_direction_input(IMX_GPIO_NR(1, 4 <
			ret = !gpio_get_value(IMX_GPIO_NR(1,  <
			break;				      <
	}						      <
	return ret;					      <
}								}

							      <
int board_mmc_init(bd_t *bis)					int board_mmc_init(bd_t *bis)
{								{
	s32 status = 0;							s32 status = 0;
	u32 index = 0;							u32 index = 0;

//#if defined(CONFIG_ARISTEUS)				      <
	usdhc_cfg[0].sdhc_clk = mxc_get_clock(MXC_ESDHC3_CLK)		usdhc_cfg[0].sdhc_clk = mxc_get_clock(MXC_ESDHC3_CLK)
	usdhc_cfg[1].sdhc_clk = mxc_get_clock(MXC_ESDHC4_CLK)		usdhc_cfg[1].sdhc_clk = mxc_get_clock(MXC_ESDHC4_CLK)
	usdhc_cfg[2].sdhc_clk = mxc_get_clock(MXC_ESDHC2_CLK) <

	usdhc_cfg[0].max_bus_width = 4;					usdhc_cfg[0].max_bus_width = 4;
	usdhc_cfg[1].max_bus_width = 4;					usdhc_cfg[1].max_bus_width = 4;
	usdhc_cfg[2].max_bus_width = 4;			      <
							      <

	for (index = 0; index < CONFIG_SYS_FSL_USDHC_NUM; ++i		for (index = 0; index < CONFIG_SYS_FSL_USDHC_NUM; ++i
		switch (index) {						switch (index) {
		case 0:								case 0:
			imx_iomux_v3_setup_multiple_pads(				imx_iomux_v3_setup_multiple_pads(
				usdhc3_pads, ARRAY_SIZE(usdhc					usdhc3_pads, ARRAY_SIZE(usdhc
			break;								break;
		case 1:								case 1:
		       imx_iomux_v3_setup_multiple_pads(			       imx_iomux_v3_setup_multiple_pads(
			       usdhc4_pads, ARRAY_SIZE(usdhc4				       usdhc4_pads, ARRAY_SIZE(usdhc4
		       break;							       break;
		case 2:					      <
		       imx_iomux_v3_setup_multiple_pads(      <
			       usdhc2_pads, ARRAY_SIZE(usdhc2 <
			break;				      <
		default:							default:
		       printf("Warning: you configured more U			       printf("Warning: you configured more U
			       "(%d) then supported by the bo				       "(%d) then supported by the bo
			       index + 1, CONFIG_SYS_FSL_USDH				       index + 1, CONFIG_SYS_FSL_USDH
		       return status;						       return status;
		}								}

		status |= fsl_esdhc_initialize(bis, &usdhc_cf			status |= fsl_esdhc_initialize(bis, &usdhc_cf
	}								}

	return status;							return status;
}								}
#endif								#endif

#ifdef CONFIG_MXC_SPI						#ifdef CONFIG_MXC_SPI
iomux_v3_cfg_t const ecspi1_pads[] = {			      |	static iomux_v3_cfg_t const ecspi1_pads[] = {
	/* SS1 */							/* SS1 */
	// why not? EIM_D19__ECSPI1_SS1			      |		MX6_PAD_EIM_D19__GPIO3_IO19  | MUX_PAD_CTRL(NO_PAD_CT
	MX6_PAD_EIM_D19__GPIO3_IO19   | MUX_PAD_CTRL(SPI_PAD_ <
	MX6_PAD_EIM_D17__ECSPI1_MISO | MUX_PAD_CTRL(SPI_PAD_C		MX6_PAD_EIM_D17__ECSPI1_MISO | MUX_PAD_CTRL(SPI_PAD_C
	MX6_PAD_EIM_D18__ECSPI1_MOSI | MUX_PAD_CTRL(SPI_PAD_C		MX6_PAD_EIM_D18__ECSPI1_MOSI | MUX_PAD_CTRL(SPI_PAD_C
	MX6_PAD_EIM_D16__ECSPI1_SCLK | MUX_PAD_CTRL(SPI_PAD_C		MX6_PAD_EIM_D16__ECSPI1_SCLK | MUX_PAD_CTRL(SPI_PAD_C
	/* SS0 */					      <
	MX6_PAD_EIM_EB2__GPIO2_IO30 | MUX_PAD_CTRL(SPI_PAD_CT <
							      <
};							      <
							      <
							      <
iomux_v3_cfg_t const ecspi2_pads[] = {			      <
	/* SS0 */					      <
	MX6_PAD_EIM_RW__GPIO2_IO26   | MUX_PAD_CTRL(SPI_PAD_C <
	MX6_PAD_EIM_OE__ECSPI2_MISO | MUX_PAD_CTRL(SPI_PAD_CT <
	MX6_PAD_EIM_CS1__ECSPI2_MOSI | MUX_PAD_CTRL(SPI_PAD_C <
	MX6_PAD_EIM_CS0__ECSPI2_SCLK | MUX_PAD_CTRL(SPI_PAD_C <
};								};

void setup_spi(void)					      |	static void setup_spi(void)
{								{
	imx_iomux_v3_setup_multiple_pads(ecspi1_pads,			imx_iomux_v3_setup_multiple_pads(ecspi1_pads,
					 ARRAY_SIZE(ecspi1_pa						 ARRAY_SIZE(ecspi1_pa
							      <
	imx_iomux_v3_setup_multiple_pads(ecspi2_pads,	      <
					 ARRAY_SIZE(ecspi2_pa <
							      <
}								}
#endif								#endif

int board_phy_config(struct phy_device *phydev)			int board_phy_config(struct phy_device *phydev)
{								{
							      <
	/* min rx data delay */						/* min rx data delay */
	//ksz9031_phy_extended_write(phydev,		      |		ksz9021_phy_extended_write(phydev,
	//		MII_KSZ9031_EXT_RGMII_RX_DATA_SKEW, 0 |				MII_KSZ9021_EXT_RGMII_RX_DATA_SKEW, 0
	/* min tx data delay */						/* min tx data delay */
	//ksz9031_phy_extended_write(phydev,		      |		ksz9021_phy_extended_write(phydev,
	//		MII_KSZ9031_EXT_RGMII_TX_DATA_SKEW, 0 |				MII_KSZ9021_EXT_RGMII_TX_DATA_SKEW, 0
	/* max rx/tx clock delay, min rx/tx control */			/* max rx/tx clock delay, min rx/tx control */
	//ksz9031_phy_extended_write(phydev,		      |		ksz9021_phy_extended_write(phydev,
	//		MII_KSZ9031_EXT_RGMII_CLOCK_SKEW, 0xf |				MII_KSZ9021_EXT_RGMII_CLOCK_SKEW, 0xf
							      <
	phy_write(phydev, MDIO_DEVAD_NONE, MII_CTRL1000, 0x1c <
							      <
	/* control data pad skew - devaddr = 0x02, register = <
	ksz9031_phy_extended_write(phydev, 0x02,	      <
				   MII_KSZ9031_EXT_RGMII_CTRL <
				   MII_KSZ9031_MOD_DATA_NO_PO <
	/* rx data pad skew - devaddr = 0x02, register = 0x05 <
	ksz9031_phy_extended_write(phydev, 0x02,	      <
				   MII_KSZ9031_EXT_RGMII_RX_D <
				   MII_KSZ9031_MOD_DATA_NO_PO <
	/* tx data pad skew - devaddr = 0x02, register = 0x05 <
	ksz9031_phy_extended_write(phydev, 0x02,	      <
				   MII_KSZ9031_EXT_RGMII_TX_D <
				   MII_KSZ9031_MOD_DATA_NO_PO <
	/* gtx and rx clock pad skew - devaddr = 0x02, regist <
	ksz9031_phy_extended_write(phydev, 0x02,	      <
				   MII_KSZ9031_EXT_RGMII_CLOC <
				   MII_KSZ9031_MOD_DATA_NO_PO <
							      <
//#else							      <
	/* min rx data delay */				      <
//	ksz9021_phy_extended_write(phydev,		      <
//			MII_KSZ9021_EXT_RGMII_RX_DATA_SKEW, 0 <
	/* min tx data delay */				      <
//	ksz9021_phy_extended_write(phydev,		      <
//			MII_KSZ9021_EXT_RGMII_TX_DATA_SKEW, 0 <
	/* max rx/tx clock delay, min rx/tx control */	      <
//	ksz9021_phy_extended_write(phydev,		      <
//			MII_KSZ9021_EXT_RGMII_CLOCK_SKEW, 0xf <
//#endif						      <
	if (phydev->drv->config)					if (phydev->drv->config)
		phydev->drv->config(phydev);					phydev->drv->config(phydev);
							      >
	return 0;							return 0;
}								}

/*							      <
	Modified to this point!				      <
 */							      <
int board_eth_init(bd_t *bis)					int board_eth_init(bd_t *bis)
{								{
							      <
#if defined(CONFIG_FEC_MXC)				      <
	uint32_t base = IMX_FEC_BASE;					uint32_t base = IMX_FEC_BASE;
	struct mii_dev *bus = NULL;					struct mii_dev *bus = NULL;
	struct phy_device *phydev = NULL;				struct phy_device *phydev = NULL;
	int ret;							int ret;
#endif							      <

	setup_iomux_enet();						setup_iomux_enet();
//puts("Board eth init called\n");			      |
#ifdef CONFIG_FEC_MXC						#ifdef CONFIG_FEC_MXC
//puts("fec get miibus\n");				      <
	bus = fec_get_miibus(base, -1);					bus = fec_get_miibus(base, -1);
	if (!bus)							if (!bus)
		return 0;							return 0;
	/* scan phy 4,5,6,7 */						/* scan phy 4,5,6,7 */
	phydev = phy_find_by_mask(bus, (0xf << 4), PHY_INTERF		phydev = phy_find_by_mask(bus, (0xf << 4), PHY_INTERF
	if (!phydev) {							if (!phydev) {
		free(bus);							free(bus);
		return 0;							return 0;
	}								}
	printf("using phy at %d\n", phydev->addr);			printf("using phy at %d\n", phydev->addr);
	ret  = fec_probe(bis, -1, base, bus, phydev);			ret  = fec_probe(bis, -1, base, bus, phydev);
	if (ret) {							if (ret) {
		printf("FEC MXC: %s:failed\n", __func__);			printf("FEC MXC: %s:failed\n", __func__);
		free(phydev);							free(phydev);
		free(bus);							free(bus);
	}								}
puts("Ethernet Init Done\n");				      <
#endif								#endif

#ifdef CONFIG_MV_UDC					      |	#ifdef CONFIG_CI_UDC
	/* For otg ethernet*/						/* For otg ethernet*/
	usb_eth_initialize(bis);					usb_eth_initialize(bis);
#endif								#endif
	return 0;							return 0;
}								}

							      >
							      >	int splash_screen_prepare(void)
							      >	{
							      >		char *env_loadsplash;
							      >
							      >		if (!getenv("splashimage") || !getenv("splashsize")) 
							      >			return -1;
							      >		}
							      >
							      >		env_loadsplash = getenv("loadsplash");
							      >		if (env_loadsplash == NULL) {
							      >			printf("Environment variable loadsplash not f
							      >			return -1;
							      >		}
							      >
							      >		if (run_command_list(env_loadsplash, -1, 0)) {
							      >			printf("failed to run loadsplash %s\n\n", env
							      >			return -1;
							      >		}
							      >
							      >		return 0;
							      >	}
							      >
static void setup_buttons(void)					static void setup_buttons(void)
{								{
	imx_iomux_v3_setup_multiple_pads(button_pads,			imx_iomux_v3_setup_multiple_pads(button_pads,
					 ARRAY_SIZE(button_pa						 ARRAY_SIZE(button_pa
}								}

#if defined(CONFIG_VIDEO_IPUV3)					#if defined(CONFIG_VIDEO_IPUV3)

static iomux_v3_cfg_t const backlight_pads[] = {		static iomux_v3_cfg_t const backlight_pads[] = {
	/* Backlight PWM for LVDS_BKLT_CTRL*/		      |		/* Backlight on RGB connector: J15 */
	//MX6_PAD_SD1_DAT3__PWM1_OUT			      <
	MX6_PAD_SD1_DAT3__GPIO1_IO21 | MUX_PAD_CTRL(NO_PAD_CT		MX6_PAD_SD1_DAT3__GPIO1_IO21 | MUX_PAD_CTRL(NO_PAD_CT
#define LVDS_BACKLIGHT_GP IMX_GPIO_NR(1, 21)		      |	#define RGB_BACKLIGHT_GP IMX_GPIO_NR(1, 21)
#define RGB_BACKLIGHT_GP IMX_GPIO_NR(1, 21)		// Th <
							      <
	/* LVDS Backlight Enable Signal to the COM Express he <
	MX6_PAD_NANDF_CS3__GPIO6_IO16 | MUX_PAD_CTRL(NO_PAD_C <
#define LVDS_BACKLIGHT_EN IMX_GPIO_NR(6,16)		      <
							      <
	/* LVDS Panel Enable Power signal*/		      <
	MX6_PAD_NANDF_CS1__GPIO6_IO14 | MUX_PAD_CTRL(NO_PAD_C <
#define LVDS_PANEL_EN	IMX_GPIO_NR(6,14)		      <

							      >		/* Backlight on LVDS connector: J6 */
							      >		MX6_PAD_SD1_CMD__GPIO1_IO18 | MUX_PAD_CTRL(NO_PAD_CTR
							      >	#define LVDS_BACKLIGHT_GP IMX_GPIO_NR(1, 18)
};								};

static iomux_v3_cfg_t const rgb_pads[] = {			static iomux_v3_cfg_t const rgb_pads[] = {
	MX6_PAD_DI0_DISP_CLK__IPU1_DI0_DISP_CLK,			MX6_PAD_DI0_DISP_CLK__IPU1_DI0_DISP_CLK,
	MX6_PAD_DI0_PIN15__IPU1_DI0_PIN15,				MX6_PAD_DI0_PIN15__IPU1_DI0_PIN15,
	MX6_PAD_DI0_PIN2__IPU1_DI0_PIN02,				MX6_PAD_DI0_PIN2__IPU1_DI0_PIN02,
	MX6_PAD_DI0_PIN3__IPU1_DI0_PIN03,				MX6_PAD_DI0_PIN3__IPU1_DI0_PIN03,
	MX6_PAD_DI0_PIN4__GPIO4_IO20,					MX6_PAD_DI0_PIN4__GPIO4_IO20,
	MX6_PAD_DISP0_DAT0__IPU1_DISP0_DATA00,				MX6_PAD_DISP0_DAT0__IPU1_DISP0_DATA00,
	MX6_PAD_DISP0_DAT1__IPU1_DISP0_DATA01,				MX6_PAD_DISP0_DAT1__IPU1_DISP0_DATA01,
	MX6_PAD_DISP0_DAT2__IPU1_DISP0_DATA02,				MX6_PAD_DISP0_DAT2__IPU1_DISP0_DATA02,
	MX6_PAD_DISP0_DAT3__IPU1_DISP0_DATA03,				MX6_PAD_DISP0_DAT3__IPU1_DISP0_DATA03,
	MX6_PAD_DISP0_DAT4__IPU1_DISP0_DATA04,				MX6_PAD_DISP0_DAT4__IPU1_DISP0_DATA04,
	MX6_PAD_DISP0_DAT5__IPU1_DISP0_DATA05,				MX6_PAD_DISP0_DAT5__IPU1_DISP0_DATA05,
	MX6_PAD_DISP0_DAT6__IPU1_DISP0_DATA06,				MX6_PAD_DISP0_DAT6__IPU1_DISP0_DATA06,
	MX6_PAD_DISP0_DAT7__IPU1_DISP0_DATA07,				MX6_PAD_DISP0_DAT7__IPU1_DISP0_DATA07,
	MX6_PAD_DISP0_DAT8__IPU1_DISP0_DATA08,				MX6_PAD_DISP0_DAT8__IPU1_DISP0_DATA08,
	MX6_PAD_DISP0_DAT9__IPU1_DISP0_DATA09,				MX6_PAD_DISP0_DAT9__IPU1_DISP0_DATA09,
	MX6_PAD_DISP0_DAT10__IPU1_DISP0_DATA10,				MX6_PAD_DISP0_DAT10__IPU1_DISP0_DATA10,
	MX6_PAD_DISP0_DAT11__IPU1_DISP0_DATA11,				MX6_PAD_DISP0_DAT11__IPU1_DISP0_DATA11,
	MX6_PAD_DISP0_DAT12__IPU1_DISP0_DATA12,				MX6_PAD_DISP0_DAT12__IPU1_DISP0_DATA12,
	MX6_PAD_DISP0_DAT13__IPU1_DISP0_DATA13,				MX6_PAD_DISP0_DAT13__IPU1_DISP0_DATA13,
	MX6_PAD_DISP0_DAT14__IPU1_DISP0_DATA14,				MX6_PAD_DISP0_DAT14__IPU1_DISP0_DATA14,
	MX6_PAD_DISP0_DAT15__IPU1_DISP0_DATA15,				MX6_PAD_DISP0_DAT15__IPU1_DISP0_DATA15,
	MX6_PAD_DISP0_DAT16__IPU1_DISP0_DATA16,				MX6_PAD_DISP0_DAT16__IPU1_DISP0_DATA16,
	MX6_PAD_DISP0_DAT17__IPU1_DISP0_DATA17,				MX6_PAD_DISP0_DAT17__IPU1_DISP0_DATA17,
	MX6_PAD_DISP0_DAT18__IPU1_DISP0_DATA18,				MX6_PAD_DISP0_DAT18__IPU1_DISP0_DATA18,
	MX6_PAD_DISP0_DAT19__IPU1_DISP0_DATA19,				MX6_PAD_DISP0_DAT19__IPU1_DISP0_DATA19,
	MX6_PAD_DISP0_DAT20__IPU1_DISP0_DATA20,				MX6_PAD_DISP0_DAT20__IPU1_DISP0_DATA20,
	MX6_PAD_DISP0_DAT21__IPU1_DISP0_DATA21,				MX6_PAD_DISP0_DAT21__IPU1_DISP0_DATA21,
	MX6_PAD_DISP0_DAT22__IPU1_DISP0_DATA22,				MX6_PAD_DISP0_DAT22__IPU1_DISP0_DATA22,
	MX6_PAD_DISP0_DAT23__IPU1_DISP0_DATA23,				MX6_PAD_DISP0_DAT23__IPU1_DISP0_DATA23,
};								};

/*							      <
struct display_info_t {					      <
	int	bus;					      <
	int	addr;					      <
	int	pixfmt;					      <
	int	(*detect)(struct display_info_t const *dev);  <
	void	(*enable)(struct display_info_t const *dev);  <
	struct	fb_videomode mode;			      <
};							      <
*/							      <
							      <
/*							      <
static int detect_hdmi(struct display_info_t const *dev)      <
{							      <
	struct hdmi_regs *hdmi	= (struct hdmi_regs *)HDMI_AR <
	return readb(&hdmi->phy_stat0) & HDMI_DVI_STAT;	      <
}							      <
*/							      <
							      <
static void do_enable_hdmi(struct display_info_t const *dev)	static void do_enable_hdmi(struct display_info_t const *dev)
{								{
	imx_enable_hdmi_phy();						imx_enable_hdmi_phy();
}								}

static int detect_i2c(struct display_info_t const *dev)		static int detect_i2c(struct display_info_t const *dev)
{								{
	return ((0 == i2c_set_bus_num(dev->bus))			return ((0 == i2c_set_bus_num(dev->bus))
		&&								&&
		(0 == i2c_probe(dev->addr)));					(0 == i2c_probe(dev->addr)));
}								}

static void enable_lvds(struct display_info_t const *dev)	static void enable_lvds(struct display_info_t const *dev)
{								{
	struct iomuxc *iomux = (struct iomuxc *)			struct iomuxc *iomux = (struct iomuxc *)
				IOMUXC_BASE_ADDR;						IOMUXC_BASE_ADDR;
	u32 reg = readl(&iomux->gpr[2]);				u32 reg = readl(&iomux->gpr[2]);
	reg |= IOMUXC_GPR2_DATA_WIDTH_CH0_24BIT;			reg |= IOMUXC_GPR2_DATA_WIDTH_CH0_24BIT;
	writel(reg, &iomux->gpr[2]);					writel(reg, &iomux->gpr[2]);
	gpio_direction_output(LVDS_BACKLIGHT_GP, 1);			gpio_direction_output(LVDS_BACKLIGHT_GP, 1);
}								}

							      >	static void enable_lvds_jeida(struct display_info_t const *de
							      >	{
							      >		struct iomuxc *iomux = (struct iomuxc *)
							      >					IOMUXC_BASE_ADDR;
							      >		u32 reg = readl(&iomux->gpr[2]);
							      >		reg |= IOMUXC_GPR2_DATA_WIDTH_CH0_24BIT
							      >		     |IOMUXC_GPR2_BIT_MAPPING_CH0_JEIDA;
							      >		writel(reg, &iomux->gpr[2]);
							      >		gpio_direction_output(LVDS_BACKLIGHT_GP, 1);
							      >	}
							      >
static void enable_rgb(struct display_info_t const *dev)	static void enable_rgb(struct display_info_t const *dev)
{								{
	imx_iomux_v3_setup_multiple_pads(		      <
		rgb_pads,				      <
		 ARRAY_SIZE(rgb_pads));			      <
	gpio_direction_output(RGB_BACKLIGHT_GP, 1);			gpio_direction_output(RGB_BACKLIGHT_GP, 1);
	/* RGB pads on the Aristeus go to a programmable ADV7 <
}								}

							      <
struct display_info_t const displays[] = {{			struct display_info_t const displays[] = {{
	.bus	= -1,					      |		.bus	= 1,
	.addr	= 0,					      |		.addr	= 0x50,
	.pixfmt	= IPU_PIX_FMT_RGB24,					.pixfmt	= IPU_PIX_FMT_RGB24,
	.detect	= detect_hdmi,				      |		.detect	= detect_i2c,
	.enable	= do_enable_hdmi,					.enable	= do_enable_hdmi,
	.mode	= {							.mode	= {
		.name           = "HDMI",					.name           = "HDMI",
		.refresh        = 60,						.refresh        = 60,
		.xres           = 1024,						.xres           = 1024,
		.yres           = 768,						.yres           = 768,
		.pixclock       = 15385,					.pixclock       = 15385,
		.left_margin    = 220,						.left_margin    = 220,
		.right_margin   = 40,						.right_margin   = 40,
		.upper_margin   = 21,						.upper_margin   = 21,
		.lower_margin   = 7,						.lower_margin   = 7,
		.hsync_len      = 60,						.hsync_len      = 60,
		.vsync_len      = 10,						.vsync_len      = 10,
		.sync           = FB_SYNC_EXT,					.sync           = FB_SYNC_EXT,
		.vmode          = FB_VMODE_NONINTERLACED			.vmode          = FB_VMODE_NONINTERLACED
} }, {								} }, {
							      >		.bus	= 0,
							      >		.addr	= 0,
							      >		.pixfmt	= IPU_PIX_FMT_RGB24,
							      >		.detect	= NULL,
							      >		.enable	= enable_lvds_jeida,
							      >		.mode	= {
							      >			.name           = "LDB-WXGA",
							      >			.refresh        = 60,
							      >			.xres           = 1280,
							      >			.yres           = 800,
							      >			.pixclock       = 14065,
							      >			.left_margin    = 40,
							      >			.right_margin   = 40,
							      >			.upper_margin   = 3,
							      >			.lower_margin   = 80,
							      >			.hsync_len      = 10,
							      >			.vsync_len      = 10,
							      >			.sync           = FB_SYNC_EXT,
							      >			.vmode          = FB_VMODE_NONINTERLACED
							      >	} }, {
	.bus	= 2,							.bus	= 2,
	.addr	= 0x4,							.addr	= 0x4,
	.pixfmt	= IPU_PIX_FMT_LVDS666,					.pixfmt	= IPU_PIX_FMT_LVDS666,
	.detect	= detect_i2c,						.detect	= detect_i2c,
	.enable	= enable_lvds,						.enable	= enable_lvds,
	.mode	= {							.mode	= {
		.name           = "Hannstar-XGA",				.name           = "Hannstar-XGA",
		.refresh        = 60,						.refresh        = 60,
		.xres           = 1024,						.xres           = 1024,
		.yres           = 768,						.yres           = 768,
		.pixclock       = 15385,					.pixclock       = 15385,
		.left_margin    = 220,						.left_margin    = 220,
		.right_margin   = 40,						.right_margin   = 40,
		.upper_margin   = 21,						.upper_margin   = 21,
		.lower_margin   = 7,						.lower_margin   = 7,
		.hsync_len      = 60,						.hsync_len      = 60,
		.vsync_len      = 10,						.vsync_len      = 10,
		.sync           = FB_SYNC_EXT,					.sync           = FB_SYNC_EXT,
		.vmode          = FB_VMODE_NONINTERLACED			.vmode          = FB_VMODE_NONINTERLACED
} }, {								} }, {
							      >		.bus	= 0,
							      >		.addr	= 0,
							      >		.pixfmt	= IPU_PIX_FMT_RGB24,
							      >		.detect	= NULL,
							      >		.enable	= enable_lvds,
							      >		.mode	= {
							      >			.name           = "LDB-WXGA-S",
							      >			.refresh        = 60,
							      >			.xres           = 1280,
							      >			.yres           = 800,
							      >			.pixclock       = 14065,
							      >			.left_margin    = 40,
							      >			.right_margin   = 40,
							      >			.upper_margin   = 3,
							      >			.lower_margin   = 80,
							      >			.hsync_len      = 10,
							      >			.vsync_len      = 10,
							      >			.sync           = FB_SYNC_EXT,
							      >			.vmode          = FB_VMODE_NONINTERLACED
							      >	} }, {
							      >		.bus	= 2,
							      >		.addr	= 0x4,
							      >		.pixfmt	= IPU_PIX_FMT_LVDS666,
							      >		.detect	= detect_i2c,
							      >		.enable	= enable_lvds,
							      >		.mode	= {
							      >			.name           = "LG-9.7",
							      >			.refresh        = 60,
							      >			.xres           = 1024,
							      >			.yres           = 768,
							      >			.pixclock       = 15385, /* ~65MHz */
							      >			.left_margin    = 480,
							      >			.right_margin   = 260,
							      >			.upper_margin   = 16,
							      >			.lower_margin   = 6,
							      >			.hsync_len      = 250,
							      >			.vsync_len      = 10,
							      >			.sync           = FB_SYNC_EXT,
							      >			.vmode          = FB_VMODE_NONINTERLACED
							      >	} }, {
	.bus	= 2,							.bus	= 2,
	.addr	= 0x38,							.addr	= 0x38,
	.pixfmt	= IPU_PIX_FMT_LVDS666,					.pixfmt	= IPU_PIX_FMT_LVDS666,
	.detect	= detect_i2c,						.detect	= detect_i2c,
	.enable	= enable_lvds,						.enable	= enable_lvds,
	.mode	= {							.mode	= {
		.name           = "wsvga-lvds",					.name           = "wsvga-lvds",
		.refresh        = 60,						.refresh        = 60,
		.xres           = 1024,						.xres           = 1024,
		.yres           = 600,						.yres           = 600,
		.pixclock       = 15385,					.pixclock       = 15385,
		.left_margin    = 220,						.left_margin    = 220,
		.right_margin   = 40,						.right_margin   = 40,
		.upper_margin   = 21,						.upper_margin   = 21,
		.lower_margin   = 7,						.lower_margin   = 7,
		.hsync_len      = 60,						.hsync_len      = 60,
		.vsync_len      = 10,						.vsync_len      = 10,
		.sync           = FB_SYNC_EXT,					.sync           = FB_SYNC_EXT,
		.vmode          = FB_VMODE_NONINTERLACED			.vmode          = FB_VMODE_NONINTERLACED
} }, {								} }, {
	.bus	= 2,							.bus	= 2,
							      >		.addr	= 0x41,
							      >		.pixfmt	= IPU_PIX_FMT_LVDS666,
							      >		.detect	= detect_i2c,
							      >		.enable	= enable_lvds,
							      >		.mode	= {
							      >			.name           = "amp1024x600",
							      >			.refresh        = 60,
							      >			.xres           = 1024,
							      >			.yres           = 600,
							      >			.pixclock       = 15385,
							      >			.left_margin    = 220,
							      >			.right_margin   = 40,
							      >			.upper_margin   = 21,
							      >			.lower_margin   = 7,
							      >			.hsync_len      = 60,
							      >			.vsync_len      = 10,
							      >			.sync           = FB_SYNC_EXT,
							      >			.vmode          = FB_VMODE_NONINTERLACED
							      >	} }, {
							      >		.bus	= 0,
							      >		.addr	= 0,
							      >		.pixfmt	= IPU_PIX_FMT_LVDS666,
							      >		.detect	= 0,
							      >		.enable	= enable_lvds,
							      >		.mode	= {
							      >			.name           = "wvga-lvds",
							      >			.refresh        = 57,
							      >			.xres           = 800,
							      >			.yres           = 480,
							      >			.pixclock       = 15385,
							      >			.left_margin    = 220,
							      >			.right_margin   = 40,
							      >			.upper_margin   = 21,
							      >			.lower_margin   = 7,
							      >			.hsync_len      = 60,
							      >			.vsync_len      = 10,
							      >			.sync           = FB_SYNC_EXT,
							      >			.vmode          = FB_VMODE_NONINTERLACED
							      >	} }, {
							      >		.bus	= 2,
	.addr	= 0x48,							.addr	= 0x48,
	.pixfmt	= IPU_PIX_FMT_RGB666,					.pixfmt	= IPU_PIX_FMT_RGB666,
	.detect	= detect_i2c,						.detect	= detect_i2c,
	.enable	= enable_rgb,						.enable	= enable_rgb,
	.mode	= {							.mode	= {
		.name           = "wvga-rgb",					.name           = "wvga-rgb",
		.refresh        = 57,						.refresh        = 57,
		.xres           = 800,						.xres           = 800,
		.yres           = 480,						.yres           = 480,
		.pixclock       = 37037,					.pixclock       = 37037,
		.left_margin    = 40,						.left_margin    = 40,
		.right_margin   = 60,						.right_margin   = 60,
		.upper_margin   = 10,						.upper_margin   = 10,
		.lower_margin   = 10,						.lower_margin   = 10,
		.hsync_len      = 20,						.hsync_len      = 20,
		.vsync_len      = 10,						.vsync_len      = 10,
		.sync           = 0,						.sync           = 0,
		.vmode          = FB_VMODE_NONINTERLACED			.vmode          = FB_VMODE_NONINTERLACED
							      >	} }, {
							      >		.bus	= 2,
							      >		.addr	= 0x10,
							      >		.pixfmt	= IPU_PIX_FMT_RGB666,
							      >		.detect	= detect_i2c,
							      >		.enable	= enable_rgb,
							      >		.mode	= {
							      >			.name           = "fusion7",
							      >			.refresh        = 60,
							      >			.xres           = 800,
							      >			.yres           = 480,
							      >			.pixclock       = 33898,
							      >			.left_margin    = 96,
							      >			.right_margin   = 24,
							      >			.upper_margin   = 3,
							      >			.lower_margin   = 10,
							      >			.hsync_len      = 72,
							      >			.vsync_len      = 7,
							      >			.sync           = 0x40000002,
							      >			.vmode          = FB_VMODE_NONINTERLACED
							      >	} }, {
							      >		.bus	= 0,
							      >		.addr	= 0,
							      >		.pixfmt	= IPU_PIX_FMT_RGB666,
							      >		.detect	= detect_i2c,
							      >		.enable	= enable_rgb,
							      >		.mode	= {
							      >			.name           = "svga",
							      >			.refresh        = 60,
							      >			.xres           = 800,
							      >			.yres           = 600,
							      >			.pixclock       = 15385,
							      >			.left_margin    = 220,
							      >			.right_margin   = 40,
							      >			.upper_margin   = 21,
							      >			.lower_margin   = 7,
							      >			.hsync_len      = 60,
							      >			.vsync_len      = 10,
							      >			.sync           = 0,
							      >			.vmode          = FB_VMODE_NONINTERLACED
							      >	} }, {
							      >		.bus	= 2,
							      >		.addr	= 0x48,
							      >		.pixfmt	= IPU_PIX_FMT_RGB24,
							      >		.detect	= detect_i2c,
							      >		.enable	= enable_rgb,
							      >		.mode	= {
							      >			.name           = "qvga",
							      >			.refresh        = 60,
							      >			.xres           = 320,
							      >			.yres           = 240,
							      >			.pixclock       = 37037,
							      >			.left_margin    = 38,
							      >			.right_margin   = 37,
							      >			.upper_margin   = 16,
							      >			.lower_margin   = 15,
							      >			.hsync_len      = 30,
							      >			.vsync_len      = 3,
							      >			.sync           = 0,
							      >			.vmode          = FB_VMODE_NONINTERLACED
} } };								} } };
							      >
size_t display_count = ARRAY_SIZE(displays);			size_t display_count = ARRAY_SIZE(displays);

/* Updated U boot 06/27/2014 to add board_video_skip*/	      |	int board_cfb_skip(void)
/*							      <
int board_video_skip(void)				      <
{								{
	int i;						      |		return 0 != getenv("novideo");
	int ret;					      <
	char const *panel = getenv("panel");		      <
	if (!panel) {					      <
		for (i = 0; i < ARRAY_SIZE(displays); i++) {  <
			struct display_info_t const *dev = di <
			if (dev->detect(dev)) {		      <
				panel = dev->mode.name;	      <
				printf("auto-detected panel % <
				break;			      <
			}				      <
		}					      <
		if (!panel) {				      <
			panel = displays[0].mode.name;	      <
			printf("No panel detected: default to <
			i = 0;				      <
		}					      <
	} else {					      <
		for (i = 0; i < ARRAY_SIZE(displays); i++) {  <
			if (!strcmp(panel, displays[i].mode.n <
				break;			      <
		}					      <
	}						      <
	if (i < ARRAY_SIZE(displays)) {			      <
		ret = ipuv3_fb_init(&displays[i].mode, 0,     <
				    displays[i].pixfmt);      <
		if (!ret) {				      <
			displays[i].enable(displays+i);	      <
			printf("Display: %s (%ux%u)\n",	      <
			       displays[i].mode.name,	      <
			       displays[i].mode.xres,	      <
			       displays[i].mode.yres);	      <
		} else {				      <
			printf("LCD %s cannot be configured:  <
			       displays[i].mode.name, ret);   <
		}					      <
	} else {					      <
		printf("unsupported panel %s\n", panel);      <
		ret = -EINVAL;				      <
	}						      <
	return (0 != ret);				      <
}								}
*/							      <

static void setup_display(void)					static void setup_display(void)
{								{
	struct mxc_ccm_reg *mxc_ccm = (struct mxc_ccm_reg *)C		struct mxc_ccm_reg *mxc_ccm = (struct mxc_ccm_reg *)C
	struct iomuxc *iomux = (struct iomuxc *)IOMUXC_BASE_A		struct iomuxc *iomux = (struct iomuxc *)IOMUXC_BASE_A
	int reg;							int reg;

	enable_ipu_clock();						enable_ipu_clock();
	imx_setup_hdmi();						imx_setup_hdmi();
	/* Turn on LDB0,IPU,IPU DI0 clocks */				/* Turn on LDB0,IPU,IPU DI0 clocks */
	reg = __raw_readl(&mxc_ccm->CCGR3);				reg = __raw_readl(&mxc_ccm->CCGR3);
	reg |=  MXC_CCM_CCGR3_LDB_DI0_MASK;				reg |=  MXC_CCM_CCGR3_LDB_DI0_MASK;
	writel(reg, &mxc_ccm->CCGR3);					writel(reg, &mxc_ccm->CCGR3);

	/* set LDB0, LDB1 clk select to 011/011 */			/* set LDB0, LDB1 clk select to 011/011 */
	reg = readl(&mxc_ccm->cs2cdr);					reg = readl(&mxc_ccm->cs2cdr);
	reg &= ~(MXC_CCM_CS2CDR_LDB_DI0_CLK_SEL_MASK			reg &= ~(MXC_CCM_CS2CDR_LDB_DI0_CLK_SEL_MASK
		 |MXC_CCM_CS2CDR_LDB_DI1_CLK_SEL_MASK);				 |MXC_CCM_CS2CDR_LDB_DI1_CLK_SEL_MASK);
	reg |= (3<<MXC_CCM_CS2CDR_LDB_DI0_CLK_SEL_OFFSET)		reg |= (3<<MXC_CCM_CS2CDR_LDB_DI0_CLK_SEL_OFFSET)
	      |(3<<MXC_CCM_CS2CDR_LDB_DI1_CLK_SEL_OFFSET);		      |(3<<MXC_CCM_CS2CDR_LDB_DI1_CLK_SEL_OFFSET);
	writel(reg, &mxc_ccm->cs2cdr);					writel(reg, &mxc_ccm->cs2cdr);

	reg = readl(&mxc_ccm->cscmr2);					reg = readl(&mxc_ccm->cscmr2);
	reg |= MXC_CCM_CSCMR2_LDB_DI0_IPU_DIV;				reg |= MXC_CCM_CSCMR2_LDB_DI0_IPU_DIV;
	writel(reg, &mxc_ccm->cscmr2);					writel(reg, &mxc_ccm->cscmr2);

	reg = readl(&mxc_ccm->chsccdr);					reg = readl(&mxc_ccm->chsccdr);
	reg |= (CHSCCDR_CLK_SEL_LDB_DI0					reg |= (CHSCCDR_CLK_SEL_LDB_DI0
		<<MXC_CCM_CHSCCDR_IPU1_DI0_CLK_SEL_OFFSET);			<<MXC_CCM_CHSCCDR_IPU1_DI0_CLK_SEL_OFFSET);
	writel(reg, &mxc_ccm->chsccdr);					writel(reg, &mxc_ccm->chsccdr);

	reg = IOMUXC_GPR2_BGREF_RRMODE_EXTERNAL_RES			reg = IOMUXC_GPR2_BGREF_RRMODE_EXTERNAL_RES
	     |IOMUXC_GPR2_DI1_VS_POLARITY_ACTIVE_HIGH			     |IOMUXC_GPR2_DI1_VS_POLARITY_ACTIVE_HIGH
	     |IOMUXC_GPR2_DI0_VS_POLARITY_ACTIVE_LOW			     |IOMUXC_GPR2_DI0_VS_POLARITY_ACTIVE_LOW
	     |IOMUXC_GPR2_BIT_MAPPING_CH1_SPWG				     |IOMUXC_GPR2_BIT_MAPPING_CH1_SPWG
	     |IOMUXC_GPR2_DATA_WIDTH_CH1_18BIT				     |IOMUXC_GPR2_DATA_WIDTH_CH1_18BIT
	     |IOMUXC_GPR2_BIT_MAPPING_CH0_SPWG				     |IOMUXC_GPR2_BIT_MAPPING_CH0_SPWG
	     |IOMUXC_GPR2_DATA_WIDTH_CH0_18BIT				     |IOMUXC_GPR2_DATA_WIDTH_CH0_18BIT
	     |IOMUXC_GPR2_LVDS_CH1_MODE_DISABLED			     |IOMUXC_GPR2_LVDS_CH1_MODE_DISABLED
	     |IOMUXC_GPR2_LVDS_CH0_MODE_ENABLED_DI0;			     |IOMUXC_GPR2_LVDS_CH0_MODE_ENABLED_DI0;
	writel(reg, &iomux->gpr[2]);					writel(reg, &iomux->gpr[2]);

	reg = readl(&iomux->gpr[3]);					reg = readl(&iomux->gpr[3]);
	reg = (reg & ~(IOMUXC_GPR3_LVDS0_MUX_CTL_MASK			reg = (reg & ~(IOMUXC_GPR3_LVDS0_MUX_CTL_MASK
			|IOMUXC_GPR3_HDMI_MUX_CTL_MASK))				|IOMUXC_GPR3_HDMI_MUX_CTL_MASK))
	    | (IOMUXC_GPR3_MUX_SRC_IPU1_DI0				    | (IOMUXC_GPR3_MUX_SRC_IPU1_DI0
	       <<IOMUXC_GPR3_LVDS0_MUX_CTL_OFFSET);			       <<IOMUXC_GPR3_LVDS0_MUX_CTL_OFFSET);
	writel(reg, &iomux->gpr[3]);					writel(reg, &iomux->gpr[3]);

	/* backlights off until needed */				/* backlights off until needed */
	imx_iomux_v3_setup_multiple_pads(backlight_pads,		imx_iomux_v3_setup_multiple_pads(backlight_pads,
					 ARRAY_SIZE(backlight						 ARRAY_SIZE(backlight
	gpio_direction_input(LVDS_BACKLIGHT_GP);			gpio_direction_input(LVDS_BACKLIGHT_GP);
	gpio_direction_input(RGB_BACKLIGHT_GP);				gpio_direction_input(RGB_BACKLIGHT_GP);
}								}
#endif								#endif

							      >	static iomux_v3_cfg_t const init_pads[] = {
							      >		NEW_PAD_CTRL(MX6_PAD_GPIO_0__CCM_CLKO1, OUTPUT_40OHM)
							      >		NEW_PAD_CTRL(MX6_PAD_GPIO_3__CCM_CLKO2, OUTPUT_40OHM)
							      >
							      >		/* wl1271 pads on nitrogen6x */
							      >		/* WL12XX_WL_IRQ_GP */
							      >		NEW_PAD_CTRL(MX6_PAD_NANDF_CS1__GPIO6_IO14, WEAK_PULL
							      >		/* WL12XX_WL_ENABLE_GP */
							      >		NEW_PAD_CTRL(MX6_PAD_NANDF_CS2__GPIO6_IO15, OUTPUT_40
							      >		/* WL12XX_BT_ENABLE_GP */
							      >		NEW_PAD_CTRL(MX6_PAD_NANDF_CS3__GPIO6_IO16, OUTPUT_40
							      >		/* USB otg power */
							      >		NEW_PAD_CTRL(MX6_PAD_EIM_D22__GPIO3_IO22, OUTPUT_40OH
							      >		NEW_PAD_CTRL(MX6_PAD_NANDF_D5__GPIO2_IO05, OUTPUT_40O
							      >		NEW_PAD_CTRL(MX6_PAD_NANDF_WP_B__GPIO6_IO09, OUTPUT_4
							      >		NEW_PAD_CTRL(MX6_PAD_GPIO_8__GPIO1_IO08, OUTPUT_40OHM
							      >		NEW_PAD_CTRL(MX6_PAD_GPIO_6__GPIO1_IO06, OUTPUT_40OHM
							      >	};
							      >
							      >	#define WL12XX_WL_IRQ_GP	IMX_GPIO_NR(6, 14)
							      >
							      >	static unsigned gpios_out_low[] = {
							      >		/* Disable wl1271 */
							      >		IMX_GPIO_NR(6, 15),	/* disable wireless */
							      >		IMX_GPIO_NR(6, 16), 	/* disable bluetooth */
							      >		IMX_GPIO_NR(3, 22),	/* disable USB otg power */
							      >		IMX_GPIO_NR(2, 5),	/* ov5640 mipi camera reset *
							      >		IMX_GPIO_NR(1, 8),	/* ov5642 reset */
							      >	};
							      >
							      >	static unsigned gpios_out_high[] = {
							      >		IMX_GPIO_NR(1, 6),	/* ov5642 powerdown */
							      >		IMX_GPIO_NR(6, 9),	/* ov5640 mipi camera power d
							      >	};
							      >
							      >	static void set_gpios(unsigned *p, int cnt, int val)
							      >	{
							      >		int i;
							      >
							      >		for (i = 0; i < cnt; i++)
							      >			gpio_direction_output(*p++, val);
							      >	}
							      >
int board_early_init_f(void)					int board_early_init_f(void)
{								{
	setup_iomux_uart();						setup_iomux_uart();

//#if defined(CONFIG_ARISTEUS)				      |		set_gpios(gpios_out_high, ARRAY_SIZE(gpios_out_high),
	/* Early board init functions for Aristeus?*/	      |		set_gpios(gpios_out_low, ARRAY_SIZE(gpios_out_low), 0
puts("Early Board Init Called\n");			      |		gpio_direction_input(WL12XX_WL_IRQ_GP);
//#else							      <
	/* Disable wl1271 For Nitrogen6w */		      <
//	gpio_direction_input(WL12XX_WL_IRQ_GP);		      <
//	gpio_direction_output(WL12XX_WL_ENABLE_GP, 0);	      <
//	gpio_direction_output(WL12XX_BT_ENABLE_GP, 0);	      <
//	gpio_direction_output(GP_USB_OTG_PWR, 0); /* OTG powe <
							      <
//	imx_iomux_v3_setup_multiple_pads(wl12xx_pads, ARRAY_S <
//#endif						      <

							      >		imx_iomux_v3_setup_multiple_pads(init_pads, ARRAY_SIZ
	setup_buttons();						setup_buttons();

#if defined(CONFIG_VIDEO_IPUV3)					#if defined(CONFIG_VIDEO_IPUV3)
	setup_display();						setup_display();
#endif								#endif
	return 0;							return 0;
}								}

/*								/*
 * Do not overwrite the console					 * Do not overwrite the console
 * Use always serial for U-Boot console				 * Use always serial for U-Boot console
 */								 */
int overwrite_console(void)					int overwrite_console(void)
{								{
	return 1;							return 1;
}								}

int board_init(void)						int board_init(void)
{								{
	struct iomuxc_base_regs *const iomuxc_regs			struct iomuxc_base_regs *const iomuxc_regs
		= (struct iomuxc_base_regs *)IOMUXC_BASE_ADDR			= (struct iomuxc_base_regs *)IOMUXC_BASE_ADDR

	clrsetbits_le32(&iomuxc_regs->gpr[1],				clrsetbits_le32(&iomuxc_regs->gpr[1],
			IOMUXC_GPR1_OTG_ID_MASK,					IOMUXC_GPR1_OTG_ID_MASK,
			IOMUXC_GPR1_OTG_ID_GPIO1);					IOMUXC_GPR1_OTG_ID_GPIO1);

	imx_iomux_v3_setup_multiple_pads(misc_pads, ARRAY_SIZ		imx_iomux_v3_setup_multiple_pads(misc_pads, ARRAY_SIZ

	/* address of boot parameters */				/* address of boot parameters */
	gd->bd->bi_boot_params = PHYS_SDRAM + 0x100;			gd->bd->bi_boot_params = PHYS_SDRAM + 0x100;

#ifdef CONFIG_MXC_SPI						#ifdef CONFIG_MXC_SPI
	setup_spi();							setup_spi();
#endif								#endif
							      >		imx_iomux_v3_setup_multiple_pads(
							      >			usdhc2_pads, ARRAY_SIZE(usdhc2_pads));
	setup_i2c(0, CONFIG_SYS_I2C_SPEED, 0x7f, &i2c_pad_inf		setup_i2c(0, CONFIG_SYS_I2C_SPEED, 0x7f, &i2c_pad_inf
	setup_i2c(1, CONFIG_SYS_I2C_SPEED, 0x7f, &i2c_pad_inf		setup_i2c(1, CONFIG_SYS_I2C_SPEED, 0x7f, &i2c_pad_inf
	setup_i2c(2, CONFIG_SYS_I2C_SPEED, 0x7f, &i2c_pad_inf		setup_i2c(2, CONFIG_SYS_I2C_SPEED, 0x7f, &i2c_pad_inf

#ifdef CONFIG_CMD_SATA						#ifdef CONFIG_CMD_SATA
	setup_sata();							setup_sata();
#endif								#endif

#if defined(CONFIG_VIDEO_IPUV3)				      <
	setup_display();				      <
#endif							      <
	return 0;							return 0;
}								}

/**							      |	static char const *board_type = "uninitialized";
 *	Function: checkboard()				      |
 *							      <
 *	Inputs: void					      <
 *	outputs: int					      <
 *	Description: 					      <
 *	  U-Boot Configuration defined function through CONFI <
 *							      <
 */							      <
int checkboard(void)						int checkboard(void)
{								{
	puts("Board: Aristeus\n");			      |		if (gpio_get_value(WL12XX_WL_IRQ_GP)) {
							      >			puts("Board: Nitrogen6X\n");
							      >			board_type = "nitrogen6x";
							      >		}
							      >		else {
							      >			puts("Board: SABRE Lite\n");
							      >			board_type = "sabrelite";
							      >		}
	return 0;							return 0;
}								}

struct button_key {						struct button_key {
	char const	*name;						char const	*name;
	unsigned	gpnum;						unsigned	gpnum;
	char		ident;						char		ident;
};								};

/* Updated for Aristeus Keys as well*/			      <
static struct button_key const buttons[] = {			static struct button_key const buttons[] = {
	{"back",	IMX_GPIO_NR(2, 2),	'B'},			{"back",	IMX_GPIO_NR(2, 2),	'B'},
	{"home",	IMX_GPIO_NR(2, 0),	'H'},	      |		{"home",	IMX_GPIO_NR(2, 4),	'H'},
	{"menu",	IMX_GPIO_NR(2, 1),	'M'},			{"menu",	IMX_GPIO_NR(2, 1),	'M'},
	{"search",	IMX_GPIO_NR(2, 3),	'S'},			{"search",	IMX_GPIO_NR(2, 3),	'S'},
	{"volup",	IMX_GPIO_NR(6, 9),	'V'},	      |		{"volup",	IMX_GPIO_NR(7, 13),	'V'},
	{"voldown",	IMX_GPIO_NR(6, 10),	'v'},	      |		{"voldown",	IMX_GPIO_NR(4, 5),	'v'},
};								};

/*								/*
 * generate a null-terminated string containing the buttons p	 * generate a null-terminated string containing the buttons p
 * returns number of keys pressed				 * returns number of keys pressed
 */								 */
static int read_keys(char *buf)					static int read_keys(char *buf)
{								{
	int i, numpressed = 0;						int i, numpressed = 0;
	for (i = 0; i < ARRAY_SIZE(buttons); i++) {			for (i = 0; i < ARRAY_SIZE(buttons); i++) {
		if (!gpio_get_value(buttons[i].gpnum))				if (!gpio_get_value(buttons[i].gpnum))
			buf[numpressed++] = buttons[i].ident;				buf[numpressed++] = buttons[i].ident;
	}								}
	buf[numpressed] = '\0';						buf[numpressed] = '\0';
	return numpressed;						return numpressed;
}								}

static int do_kbd(cmd_tbl_t *cmdtp, int flag, int argc, char 	static int do_kbd(cmd_tbl_t *cmdtp, int flag, int argc, char 
{								{
	char envvalue[ARRAY_SIZE(buttons)+1];				char envvalue[ARRAY_SIZE(buttons)+1];
	int numpressed = read_keys(envvalue);				int numpressed = read_keys(envvalue);
	setenv("keybd", envvalue);					setenv("keybd", envvalue);
	return numpressed == 0;						return numpressed == 0;
}								}

U_BOOT_CMD(							U_BOOT_CMD(
	kbd, 1, 1, do_kbd,						kbd, 1, 1, do_kbd,
	"Tests for keypresses, sets 'keybd' environment varia		"Tests for keypresses, sets 'keybd' environment varia
	"Returns 0 (true) to shell if key is pressed."			"Returns 0 (true) to shell if key is pressed."
);								);

#ifdef CONFIG_PREBOOT						#ifdef CONFIG_PREBOOT
static char const kbd_magic_prefix[] = "key_magic";		static char const kbd_magic_prefix[] = "key_magic";
static char const kbd_command_prefix[] = "key_cmd";		static char const kbd_command_prefix[] = "key_cmd";

static void preboot_keys(void)					static void preboot_keys(void)
{								{
	int numpressed;							int numpressed;
	char keypress[ARRAY_SIZE(buttons)+1];				char keypress[ARRAY_SIZE(buttons)+1];
	numpressed = read_keys(keypress);				numpressed = read_keys(keypress);
	if (numpressed) {						if (numpressed) {
		char *kbd_magic_keys = getenv("magic_keys");			char *kbd_magic_keys = getenv("magic_keys");
		char *suffix;							char *suffix;
		/*								/*
		 * loop over all magic keys					 * loop over all magic keys
		 */								 */
		for (suffix = kbd_magic_keys; *suffix; ++suff			for (suffix = kbd_magic_keys; *suffix; ++suff
			char *keys;							char *keys;
			char magic[sizeof(kbd_magic_prefix) +				char magic[sizeof(kbd_magic_prefix) +
			sprintf(magic, "%s%c", kbd_magic_pref				sprintf(magic, "%s%c", kbd_magic_pref
			keys = getenv(magic);						keys = getenv(magic);
			if (keys) {							if (keys) {
				if (!strcmp(keys, keypress))					if (!strcmp(keys, keypress))
					break;								break;
			}								}
		}								}
		if (*suffix) {							if (*suffix) {
			char cmd_name[sizeof(kbd_command_pref				char cmd_name[sizeof(kbd_command_pref
			char *cmd;							char *cmd;
			sprintf(cmd_name, "%s%c", kbd_command				sprintf(cmd_name, "%s%c", kbd_command
			cmd = getenv(cmd_name);						cmd = getenv(cmd_name);
			if (cmd) {							if (cmd) {
				setenv("preboot", cmd);						setenv("preboot", cmd);
				return;								return;
			}								}
		}								}
	}								}
}								}
#endif								#endif

#ifdef CONFIG_CMD_BMODE						#ifdef CONFIG_CMD_BMODE
static const struct boot_mode board_boot_modes[] = {		static const struct boot_mode board_boot_modes[] = {
	/* 4 bit bus width */						/* 4 bit bus width */
	/* ordered as CFG1[7:0], CFG2[7:0], CFG3[7:0], CFG4[7 |		{"mmc0",	MAKE_CFGVAL(0x40, 0x30, 0x00, 0x00)},
	{"mmc0",	MAKE_CFGVAL(0x40, 0x30, 0x00, 0x00)}, |		{"mmc1",	MAKE_CFGVAL(0x40, 0x38, 0x00, 0x00)},
	{"mmc1",	MAKE_CFGVAL(0x40, 0x38, 0x00, 0x00)}, <
	{"mmc2",	MAKE_CFGVAL(0x40, 0x28, 0x00, 0x00)}, <
	{NULL,		0},						{NULL,		0},
};								};
#endif								#endif

int misc_init_r(void)						int misc_init_r(void)
{								{
#ifdef CONFIG_PREBOOT						#ifdef CONFIG_PREBOOT
	preboot_keys();							preboot_keys();
#endif								#endif

#ifdef CONFIG_CMD_BMODE						#ifdef CONFIG_CMD_BMODE
	add_board_boot_modes(board_boot_modes);				add_board_boot_modes(board_boot_modes);
#endif								#endif
							      >		return 0;
							      >	}
							      >
							      >	int board_late_init(void)
							      >	{
							      >		int cpurev = get_cpu_rev();
							      >		setenv("cpu",get_imx_type((cpurev & 0xFF000) >> 12));
							      >		if (0 == getenv("board"))
							      >			setenv("board",board_type);
	return 0;							return 0;
}								}
